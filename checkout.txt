<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - YourStore</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f8f9fa;
            color: #212529;
            line-height: 1.6;
        }
        
        /* .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        } */
        
        .checkout-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }
        
        .checkout-form {
            flex: 1;
            min-width: 320px;
        }
        
        .order-summary {
            width: 380px;
            min-width: 320px;
        }
        
        .checkout-section {
            background-color: #ffffff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .section-title {
            font-size: 18px;
            margin-bottom: 15px;
            font-weight: 600;
            color: #333;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .edit-btn {
            background-color: transparent;
            border: none;
            color: #4a6ee0;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
        }
        
        .address-card {
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            position: relative;
            margin-bottom: 15px;
        }
        
        .address-card.selected {
            border-color: #4a6ee0;
            background-color: #f0f4ff;
        }
        
        .address-default-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #e6f7e6;
            color: #28a745;
            font-size: 12px;
            padding: 2px 8px;
            border-radius: 3px;
        }
        
        .address-action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .address-action-btn {
            background-color: transparent;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
        }
        
        .address-action-btn:hover {
            background-color: #f8f9fa;
        }
        
        .address-list-container {
            margin-top: 15px;
            display: none;
        }
        
        .add-new-address {
            color: #4a6ee0;
            background-color: transparent;
            border: 1px dashed #4a6ee0;
            border-radius: 5px;
            padding: 15px;
            width: 100%;
            text-align: center;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .add-new-address:hover {
            background-color: #f0f4ff;
        }
        
        .coupon-section {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        
        .coupon-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            min-width: 150px;
        }
        
        .coupon-button {
            padding: 10px 20px;
            background-color: #4a6ee0;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        
        .coupon-button:hover {
            background-color: #3a5bbf;
        }
        
        .coupon-list {
            width: 100%;
            margin-top: 15px;
            display: none;
        }
        
        .coupon-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
        }
        
        .coupon-item:hover {
            background-color: #f0f4ff;
            border-color: #4a6ee0;
        }
        
        .coupon-code {
            font-weight: 600;
            color: #4a6ee0;
        }
        
        .coupon-details {
            font-size: 14px;
            color: #666;
        }
        
        .coupon-validity {
            font-size: 12px;
            color: #28a745;
        }
        
        .expired {
            color: #dc3545;
        }
        
        .payment-methods {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .payment-method {
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .payment-method:hover {
            background-color: #f8f9fa;
        }
        
        .payment-method.selected {
            border-color: #4a6ee0;
            background-color: #f0f4ff;
        }
        
        .payment-radio {
            width: 20px;
            height: 20px;
            accent-color: #4a6ee0;
        }
        
        .payment-logo {
            height: 24px;
            width: 40px;
            object-fit: contain;
        }
        
        .payment-name {
            flex: 1;
            font-weight: 500;
        }
        
        .product-item {
            display: flex;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .product-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            margin-right: 15px;
        }
        
        .product-details {
            flex: 1;
        }
        
        .product-name {
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .product-price {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
        }
        
        .price-details {
            margin-top: 15px;
        }
        
        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .price-label {
            color: #666;
        }
        
        .discount-text {
            color: #28a745;
        }
        
        .total-row {
            font-weight: 600;
            font-size: 18px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        
        .place-order-btn {
            width: 100%;
            padding: 15px;
            background-color: #4a6ee0;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
        }
        
        .place-order-btn:hover {
            background-color: #3a5bbf;
        }

        @media (max-width: 768px) {
            .checkout-container {
                flex-direction: column;
            }
            
            .order-summary {
                width: 100%;
            }
        }
    </style>
</head>
<body>

    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/" rel="nofollow">Home</a>
                <span></span> <a href="/cart" rel="nofollow">Cart</a>
                <span></span> Checkout
            </div>
        </div>
    </div>

    <div class="container">
        <h1>Checkout</h1>
        
        <div class="checkout-container">
            <div class="checkout-form">
                <!-- Shipping Address Section -->
                <div class="checkout-section">
                    <div class="section-title">
                        <span>Shipping Address</span>
                    </div>
                    
                    <% if (defaultAddress && defaultAddress.name) { %>
                    <div class="address-card selected">
                        <div class="address-default-badge">Default</div>
                       
                        <strong><%=defaultAddress.name%></strong>
                        <div class="badge badge-secondary"><%= defaultAddress.addressType %></div>
                        <p><%=defaultAddress.city%></p>
                        <p><%=defaultAddress.landMark%></p>
                        <p><%=defaultAddress.state%></p>
                        <p><%=defaultAddress.phone%></p>
                        <p><%=defaultAddress.altPhone%></p>
                        
                        <div class="address-action-buttons">
                            <button class="address-action-btn" id="editAddressBtn">Edit</button>
                            <button class="address-action-btn" id="changeAddressBtn">Change Address</button>
                        </div>
                    </div>
                    <% } else { %>
                    <div class="address-list-container" id="address-list">
                        <div class="address-card">
                            
                            <div class="address-details">
                              <strong><%= defaultAddress.name %></strong>
                              <p><%= defaultAddress.addressType %></p>
                              <p><%= defaultAddress.city %>, <%= defaultAddress.state %> - <%= defaultAddress.pincode %></p>
                              <p>Phone: <%= defaultAddress.phone %></p>
                          </div>
                            
                            <div class="address-action-buttons">
                                <button class="address-action-btn">Edit</button>
                                <button class="address-action-btn">Delete</button>
                                <button class="address-action-btn">Set as Default</button>
                            </div>
                        </div>
                        
                        <button class="add-new-address">
                            + Add New Address
                        </button>
                    </div>
                    <% } %>
                </div>

                <!-- Edit Address Modal -->
      <div id="editAddressModal" class="modal fade" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editAddressModalLabel">
                Edit Address
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="editAddressForm">
                <div class="mb-3">
                  <label for="editAddressType" class="form-label">Address Type</label>
                  <select class="form-control" id="editAddressType" name="addressType">
                    <option value="home">home</option>
                    <option value="office">office</option>
                    <option value="other">other</option>
                  </select>
                </div>
                <div class="mb-3">
                  <label for="editName" class="form-label"><br /><br />House Name</label>
                  <input type="text" class="form-control" id="editName" name="name" />
                </div>
                <div class="mb-3">
                  <label for="editCity" class="form-label">City</label>
                  <input type="text" class="form-control" id="editCity" name="city" />
                </div>
                <div class="mb-3">
                  <label for="editLandMark" class="form-label">Landmark</label>
                  <input type="text" class="form-control" id="editLandMark" name="landMark" />
                </div>
                <div class="mb-3">
                  <label for="editState" class="form-label">State</label>
                  <div class="dropdown">
                    <button class="btn btn-light dropdown-toggle form-control border-3" type="button" id="editStateDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                      Select State
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="editStateDropdown" style="max-height: 200px; overflow-y: auto">
                      <li>
                        <a class="dropdown-item" href="#" data-value="Andhra Pradesh">Andhra Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Arunachal Pradesh">Arunachal Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Assam">Assam</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Bihar">Bihar</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Chhattisgarh">Chhattisgarh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Goa">Goa</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Gujarat">Gujarat</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Haryana">Haryana</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Himachal Pradesh">Himachal Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Jharkhand">Jharkhand</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Karnataka">Karnataka</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Kerala">Kerala</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Madhya Pradesh">Madhya Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Maharashtra">Maharashtra</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Manipur">Manipur</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Meghalaya">Meghalaya</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Mizoram">Mizoram</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Nagaland">Nagaland</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Odisha">Odisha</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Punjab">Punjab</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Rajasthan">Rajasthan</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Sikkim">Sikkim</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Tamil Nadu">Tamil Nadu</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Telangana">Telangana</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Tripura">Tripura</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Uttar Pradesh">Uttar Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Uttarakhand">Uttarakhand</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="West Bengal">West Bengal</a>
                      </li>
                    </ul>
                  </div>
                  <input type="hidden" id="editState" name="state" />
                </div>
                <div class="mb-3">
                  <label for="editPincode" class="form-label">Pincode</label>
                  <input type="number" class="form-control" id="editPincode" name="pincode" />
                </div>
                <div class="mb-3">
                  <label for="editPhone" class="form-label">Phone</label>
                  <input type="number" class="form-control" id="editPhone" name="phone" />
                </div>
                <div class="mb-3">
                  <label for="editAltPhone" class="form-label">Alternate Phone</label>
                  <input type="number" class="form-control" id="editAltPhone" name="altPhone" />
                </div>

                <input type="hidden" name="addressId" id="editAddressId" value="<%= defaultAddress._id %>" />
                <button type="submit" class="btn btn-primary">
                  Save Changes
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                  Close
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      <!-- Change Address Modal -->
      <div id="changeAddressModal" class="modal fade" tabindex="-1" aria-labelledby="changeAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="changeAddressModalLabel">
                Select Address
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="addressForm">
                <% addresses.forEach(function(address) { %>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="address" id="address<%= address._id %>" value="<%= address._id %>" <%=
                  address.isDefault ? 'checked' : '' %> />
                  <label class="form-check-label" for="address<%= address._id %>">
                    <%= address.name %>, <%= address.addressType %>, <%=
                    address.city %>, <%= address.state %> - <%= address.pincode
                    %>
                  </label>
                </div>
                <% }) %>
              </form>
              <a href="#" class="btn btn-link" id="addNewAddressBtn">Add New Address</a>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                Close
              </button>
              <button type="button" class="btn btn-primary" id="useThisAddressBtn">
                Use This Address
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Add New Address Modal -->
      <div id="addNewAddressModal" class="modal fade" tabindex="-1" aria-labelledby="addNewAddressModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title text-black" id="addNewAddressModalLabel">
                Add New Address
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="addAddressForm">
                <div class="mb-3">
                  <label for="newAddressType" class="form-label">Address Type</label>
                  <select class="form-control" id="newAddressType" name="addressType">
                    <option value="home">home</option>
                    <option value="office">office</option>
                    <option value="other">other</option>
                  </select>
                </div>
                <div class="mb-3">
                  <label for="newName" class="form-label"><br /><br />House Name</label>
                  <input type="text" class="form-control" id="newName" name="name" />
                </div>
                <div class="mb-3">
                  <label for="newCity" class="form-label">City</label>
                  <input type="text" class="form-control" id="newCity" name="city" />
                </div>
                <div class="mb-3">
                  <label for="newLandMark" class="form-label">Landmark</label>
                  <input type="text" class="form-control" id="newLandMark" name="landMark" />
                </div>
                <div class="mb-3">
                  <label for="newState" class="form-label">State</label>
                  <div class="dropdown">
                    <button class="btn btn-light dropdown-toggle form-control border-3" type="button" id="stateDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                      Select State
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="stateDropdown" style="max-height: 200px; overflow-y: auto">
                      <li>
                        <a class="dropdown-item" href="#" data-value="Andhra Pradesh">Andhra Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Arunachal Pradesh">Arunachal Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Assam">Assam</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Bihar">Bihar</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Chhattisgarh">Chhattisgarh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Goa">Goa</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Gujarat">Gujarat</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Haryana">Haryana</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Himachal Pradesh">Himachal Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Jharkhand">Jharkhand</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Karnataka">Karnataka</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Kerala">Kerala</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Madhya Pradesh">Madhya Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Maharashtra">Maharashtra</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Manipur">Manipur</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Meghalaya">Meghalaya</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Mizoram">Mizoram</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Nagaland">Nagaland</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Odisha">Odisha</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Punjab">Punjab</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Rajasthan">Rajasthan</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Sikkim">Sikkim</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Tamil Nadu">Tamil Nadu</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Telangana">Telangana</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Tripura">Tripura</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Uttar Pradesh">Uttar Pradesh</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="Uttarakhand">Uttarakhand</a>
                      </li>
                      <li>
                        <a class="dropdown-item" href="#" data-value="West Bengal">West Bengal</a>
                      </li>
                    </ul>
                  </div>
                  <input type="hidden" id="state" name="state" />
                </div>
                <div class="mb-3">
                  <label for="newPincode" class="form-label">Pincode</label>
                  <input type="number" class="form-control" id="newPincode" name="pincode" />
                </div>
                <div class="mb-3">
                  <label for="newPhone" class="form-label">Phone</label>
                  <input type="number" class="form-control" id="newPhone" name="phone" />
                </div>
                <div class="mb-3">
                  <label for="newAltPhone" class="form-label">Alternate Phone</label>
                  <input type="number" class="form-control" id="newAltPhone" name="altPhone" />
                </div>
                <button type="submit" class="btn btn-primary">
                  Add Address
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                  Close
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
                
                <!-- Coupon Section -->
                <div class="checkout-section">
                    <div class="section-title">Apply Coupon</div>
                    
                    <div class="coupon-section">
                        <input type="text" class="coupon-input" id="coupon-input" placeholder="Enter coupon code">
                        <button class="coupon-button" id="apply-coupon">Apply</button>
                    </div>
                    
                    <div class="coupon-list" id="coupon-list">
                        <div class="coupon-item">
                            <div>
                                <div class="coupon-code">WELCOME20</div>
                                <div class="coupon-details">20% off on your first order</div>
                                <div class="coupon-validity">Valid till: April 30, 2025</div>
                            </div>
                            <div>
                                <button class="coupon-button">Apply</button>
                            </div>
                        </div>
                        
                        <div class="coupon-item">
                            <div>
                                <div class="coupon-code">SPRING25</div>
                                <div class="coupon-details">25% off on spring collection</div>
                                <div class="coupon-validity">Valid till: March 31, 2025</div>
                            </div>
                            <div>
                                <button class="coupon-button">Apply</button>
                            </div>
                        </div>
                        
                        <div class="coupon-item">
                            <div>
                                <div class="coupon-code">FLAT10</div>
                                <div class="coupon-details">Flat $10 off on orders above $100</div>
                                <div class="coupon-validity expired">Expired on: February 28, 2025</div>
                            </div>
                            <div>
                                <button class="coupon-button" disabled style="background-color: #ccc;">Expired</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Payment Methods Section -->
                <div class="checkout-section">
                    <div class="section-title">Payment Method</div>
                    
                    <div class="payment-methods">
                        <div class="payment-method selected">
                            <input type="radio" name="payment" id="upi" class="payment-radio" checked>
                            <label for="upi" class="payment-name">UPI</label>
                            <img src="/api/placeholder/40/24" alt="UPI" class="payment-logo">
                        </div>
                        
                        <div class="payment-method">
                            <input type="radio" name="payment" id="cod" class="payment-radio">
                            <label for="cod" class="payment-name">Cash On Delivery</label>
                            <img src="/api/placeholder/40/24" alt="COD" class="payment-logo">
                        </div>
                        
                        <div class="payment-method">
                            <input type="radio" name="payment" id="wallet" class="payment-radio">
                            <label for="wallet" class="payment-name">Wallet</label>
                            <img src="/api/placeholder/40/24" alt="Wallet" class="payment-logo">
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Order Summary Section -->
            <div class="order-summary">
                <div class="checkout-section">
                    <div class="section-title">Order Summary</div>
                    
                    <div class="product-item">
                        <img src="/api/placeholder/80/80" alt="Product" class="product-img">
                        <div class="product-details">
                            <div class="product-name">Premium Wireless Headphones</div>
                            <div class="product-variant">Color: Black</div>
                            <div class="product-price">
                                <span>1 × $199.99</span>
                                <span>$199.99</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="product-item">
                        <img src="/api/placeholder/80/80" alt="Product" class="product-img">
                        <div class="product-details">
                            <div class="product-name">Smart Watch Series X</div>
                            <div class="product-variant">Color: Silver</div>
                            <div class="product-price">
                                <span>1 × $299.99</span>
                                <span>$299.99</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>   
</body>


<!-- <script>

document
    .getElementById("changeAddressBtn")
    .addEventListener("click", function() {
      const changeAddressModal = new bootstrap.Modal(
        document.getElementById("changeAddressModal")
      );
      changeAddressModal.show();
    });

  document
    .getElementById("useThisAddressBtn")
    .addEventListener("click", function() {
      console.log("Use This Address button clicked");
      const selectedAddress = document.querySelector(
        'input[name="address"]:checked'
      ).value;

      // Perform an API call to update the default address for the user.
      fetch(`/update-default-address`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            addressId: selectedAddress
          }),
        })
        .then((response) => response.json())
        .then((data) => {
          if (data.status) {
            // Update the shipping address without reloading the page
            const selectedAddressElement = document.querySelector(
              `label[for="address${selectedAddress}"]`
            ).textContent;
            const addressParts = selectedAddressElement.split(",");

            // Dynamically update the shipping address section
            document.querySelector(".address-details").innerHTML = `
        <strong>${addressParts[0]}</strong><br>
        ${addressParts[1]}<br>
        ${addressParts[2]}, ${addressParts[3]} - ${addressParts[4]}<br>
        ${addressParts[5] || "N/A"}`;
            location.reload();

            const changeAddressModal = bootstrap.Modal.getInstance(
              document.getElementById("changeAddressModal")
            );
            changeAddressModal.hide();
          } else {
            alert("Error setting default address");
          }
        })
        .catch((error) => console.error("Error:", error));
    });

  document.addEventListener("DOMContentLoaded", function() {
    const dropdownItems = document.querySelectorAll(".dropdown-item");
    const stateDropdownBtn = document.getElementById("stateDropdown");
    const stateInput = document.getElementById("state");

    dropdownItems.forEach(function(item) {
      item.addEventListener("click", function() {
        const selectedState = item.getAttribute("data-value");
        stateDropdownBtn.textContent = selectedState;
        stateInput.value = selectedState;
      });
    });

    document.getElementById("addNewAddressBtn").addEventListener("click", function() {
      document.getElementById("stateDropdown").textContent = "Select State";
      document.getElementById("state").value = "";

      const addNewAddressModal = new bootstrap.Modal(document.getElementById("addNewAddressModal"));
      addNewAddressModal.show();
    });

    document.getElementById("addAddressForm").addEventListener("submit", function(event) {
      event.preventDefault();

      const formData = new FormData(document.getElementById("addAddressForm"));
      const dataObject = {};
      formData.forEach((value, key) => {
        dataObject[key] = value;
      });

      // Form Validation
      const requiredFields = [
        'addressType', 'name', 'city', 'state', 'pincode', 'phone'
      ];

      for (let field of requiredFields) {
        if (!dataObject[field]) {
          Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: `Please fill in the ${field.charAt(0).toUpperCase() + field.slice(1)} field.`,
            confirmButtonText: 'Okay',
          });
          return;
        }
      }

      // Additional Validation for Name (Allow spaces but not empty or spaces-only names)
      if (!/^[A-Za-z\s\-']+$/.test(dataObject.name) || !/\S/.test(dataObject.name)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Name',
          text: 'Please enter a valid name (only letters, spaces, hyphens, and apostrophes are allowed). Name cannot be empty or consist of only spaces.',
          confirmButtonText: 'Okay',
        });
        return;
      }
      // Additional Validation for Phone and Pincode
      if (!/^\d{10}$/.test(dataObject.phone)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Phone Number',
          text: 'Please enter a valid 10-digit phone number.',
          confirmButtonText: 'Okay',
        });
        return;
      }

      if (!/^\d{6}$/.test(dataObject.pincode)) {
        Swal.fire({
          icon: 'error',
          title: 'Invalid Pincode',
          text: 'Please enter a valid 6-digit pincode.',
          confirmButtonText: 'Okay',
        });
        return;
      }

      // Submit the form data via fetch if validation is successful
      fetch("/addAddress", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(dataObject),
        })
        .then((response) => response.json())
        .then((data) => {
          if (data.status) {
            const addNewAddressModal = bootstrap.Modal.getInstance(document.getElementById("addNewAddressModal"));
            addNewAddressModal.hide();

            const newAddress = data.newAddress;
            const addressListContainer = document.getElementById("addressForm");
            const newAddressElement = document.createElement("div");
            newAddressElement.classList.add("form-check");
            newAddressElement.innerHTML = `
          <input class="form-check-input" type="radio" name="address" id="address${newAddress._id}" value="${newAddress._id}" checked />
          <label class="form-check-label" for="address${newAddress._id}">
            ${newAddress.name}, ${newAddress.addressType}, ${newAddress.city}, ${newAddress.state} - ${newAddress.pincode}
          </label>
        `;
            addressListContainer.appendChild(newAddressElement);

            Swal.fire({
              icon: 'success',
              title: 'Address Added Successfully',
              text: 'Your new address has been added.',
              confirmButtonText: 'Okay',
            }).then(() => {
              location.reload();

            });

            const changeAddressModal = bootstrap.Modal.getInstance(document.getElementById("changeAddressModal"));
            changeAddressModal.show();
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error Adding Address',
              text: data.message || 'There was an error adding your address.',
              confirmButtonText: 'Okay',
            });
          }
        })
        .catch((error) => {
          console.error("Error adding address:", error);
          Swal.fire({
            icon: 'error',
            title: 'Something Went Wrong',
            text: 'There was an issue with the server, please try again later.',
            confirmButtonText: 'Okay',
          });
        });
    });
// ---------------------
    document
      .getElementById("useThisAddressBtn")
      .addEventListener("click", function() {
        const selectedAddressId = document.querySelector(
          'input[name="address"]:checked'
        ).value;
        console.log("Selected Address:", selectedAddressId);

        fetch(`/update-default-address`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              addressId: selectedAddressId
            }),
          })
          .then((response) => response.json())
          .then((data) => {
            if (data.status) {
              const selectedAddress = data.selectedAddress;
              document.querySelector(".address-details").innerHTML = `
          <strong>${selectedAddress.name}</strong><br>
          ${selectedAddress.addressType}<br>
          ${selectedAddress.city}, ${selectedAddress.state} - ${selectedAddress.pincode}<br>
          Phone: ${selectedAddress.phone}
        `;
              const changeAddressModal = bootstrap.Modal.getInstance(
                document.getElementById("changeAddressModal")
              );
              changeAddressModal.hide();
            } else {
              alert("Error updating address");
            }
          })
          .catch((error) => console.error("Error:", error));
      });
  });

  document.getElementById("editAddressBtn").addEventListener("click", function() {
    const address = {
      name: "<%= defaultAddress.name %>",
      addressType: "<%= defaultAddress.addressType %>",
      city: "<%= defaultAddress.city %>",
      landMark: "<%= defaultAddress.landMark %>",
      state: "<%= defaultAddress.state %>",
      pincode: "<%= defaultAddress.pincode %>",
      phone: "<%= defaultAddress.phone %>",
      altPhone: "<%= defaultAddress.altPhone %>",
    };

    document.getElementById("editName").value = address.name;
    document.getElementById("editAddressType").value = address.addressType;
    document.getElementById("editCity").value = address.city;
    document.getElementById("editLandMark").value = address.landMark || "";
    document.getElementById("editPincode").value = address.pincode;
    document.getElementById("editPhone").value = address.phone;
    document.getElementById("editAltPhone").value = address.altPhone || "";

    document.getElementById("editState").value = address.state;
    document.getElementById("editStateDropdown").textContent = address.state;

    const dropdownItems = document.querySelectorAll(".dropdown-item");
    dropdownItems.forEach((item) => {
      if (item.getAttribute("data-value") === address.state) {
        document.getElementById("editStateDropdown").textContent = item.textContent;
      }
    });

    const editAddressModal = new bootstrap.Modal(document.getElementById("editAddressModal"));
    editAddressModal.show();
  });

  const dropdownItems = document.querySelectorAll(".dropdown-item");
  const stateDropdownBtn = document.getElementById("editStateDropdown");
  const stateInput = document.getElementById("editState");

  dropdownItems.forEach(function(item) {
    item.addEventListener("click", function() {
      const selectedState = item.getAttribute("data-value");
      stateDropdownBtn.textContent = selectedState;
      stateInput.value = selectedState;
    });
  });

  document.getElementById("editAddressForm").addEventListener("submit", function(event) {
    event.preventDefault();

    const formData = new FormData(document.getElementById("editAddressForm"));
    const dataObject = {};
    formData.forEach((value, key) => {
      dataObject[key] = value;
    });

    // Form Validation
    const requiredFields = [
      'addressType', 'name', 'city', 'state', 'pincode', 'phone'
    ];

    for (let field of requiredFields) {
      if (!dataObject[field]) {
        Swal.fire({
          icon: 'error',
          title: 'Validation Error',
          text: `Please fill in the ${field.charAt(0).toUpperCase() + field.slice(1)} field.`,
          confirmButtonText: 'Okay',
        });
        return;
      }
    }

    // Additional Validation for Name (Allow spaces but not empty or spaces-only names)
    if (!/^[A-Za-z\s\-']+$/.test(dataObject.name) || !/\S/.test(dataObject.name)) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Name',
        text: 'Please enter a valid name (only letters, spaces, hyphens, and apostrophes are allowed). Name cannot be empty or consist of only spaces.',
        confirmButtonText: 'Okay',
      });
      return;
    }

    // Additional Validation for Phone and Pincode
    if (!/^\d{10}$/.test(dataObject.phone)) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Phone Number',
        text: 'Please enter a valid 10-digit phone number.',
        confirmButtonText: 'Okay',
      });
      return;
    }

    if (!/^\d{6}$/.test(dataObject.pincode)) {
      Swal.fire({
        icon: 'error',
        title: 'Invalid Pincode',
        text: 'Please enter a valid 6-digit pincode.',
        confirmButtonText: 'Okay',
      });
      return;
    }

    // Submit the form data via fetch if validation is successful
    fetch("/editAddress", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataObject),
      })
      .then((response) => response.json())
      .then((data) => {
        if (data.status) {
          document.querySelector(".address-details").innerHTML = `
          <strong>${data.updatedAddress.name}</strong><br>
          ${data.updatedAddress.addressType}<br>
          ${data.updatedAddress.city}, ${data.updatedAddress.state} - ${data.updatedAddress.pincode}<br>
          Phone: ${data.updatedAddress.phone}
        `;

          const editAddressModal = bootstrap.Modal.getInstance(document.getElementById("editAddressModal"));
          editAddressModal.hide();

          Swal.fire({
            icon: 'success',
            title: 'Address Updated Successfully',
            text: 'Your address has been updated.',
            confirmButtonText: 'Okay',
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error Updating Address',
            text: data.message || 'There was an error updating your address.',
            confirmButtonText: 'Okay',
          });
        }
      })
      .catch((error) => {
        console.error("Error updating address:", error);
        Swal.fire({
          icon: 'error',
          title: 'Something Went Wrong',
          text: 'There was an issue with the server, please try again later.',
          confirmButtonText: 'Okay',
        });
      });
  });
    

</script> -->


<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Initialize Bootstrap components
    if (typeof bootstrap !== 'undefined') {
        // Edit Address Modal Dropdown Events
        const editDropdownItems = document.querySelectorAll("#editAddressModal .dropdown-item");
        const editStateDropdownBtn = document.getElementById("editStateDropdown");
        const editStateInput = document.getElementById("editState");

        editDropdownItems.forEach(function(item) {
            item.addEventListener("click", function() {
                const selectedState = item.getAttribute("data-value");
                if (editStateDropdownBtn) {
                    editStateDropdownBtn.textContent = selectedState;
                }
                if (editStateInput) {
                    editStateInput.value = selectedState;
                }
            });
        });

        // Add New Address Modal Dropdown Events
        const newDropdownItems = document.querySelectorAll("#addNewAddressModal .dropdown-item");
        const newStateDropdownBtn = document.getElementById("stateDropdown");
        const newStateInput = document.getElementById("state");

        newDropdownItems.forEach(function(item) {
            item.addEventListener("click", function() {
                const selectedState = item.getAttribute("data-value");
                if (newStateDropdownBtn) {
                    newStateDropdownBtn.textContent = selectedState;
                }
                if (newStateInput) {
                    newStateInput.value = selectedState;
                }
            });
        });
    }

    // Edit Address Button Click
    const editAddressBtn = document.getElementById("editAddressBtn");
    if (editAddressBtn) {
        editAddressBtn.addEventListener("click", function() {
            const address = {
                _id: "<%= defaultAddress._id %>",
                name: "<%= defaultAddress.name %>",
                addressType: "<%= defaultAddress.addressType %>",
                city: "<%= defaultAddress.city %>",
                landMark: "<%= defaultAddress.landMark %>",
                state: "<%= defaultAddress.state %>",
                pincode: "<%= defaultAddress.pincode %>",
                phone: "<%= defaultAddress.phone %>",
                altPhone: "<%= defaultAddress.altPhone %>"
            };

            ocument.getElementById("editAddressId").value = address._id;
            document.getElementById("editName").value = address.name;
            document.getElementById("editAddressType").value = address.addressType;
            document.getElementById("editCity").value = address.city;
            document.getElementById("editLandMark").value = address.landMark || "";
            document.getElementById("editPincode").value = address.pincode;
            document.getElementById("editPhone").value = address.phone;
            document.getElementById("editAltPhone").value = address.altPhone || "";

            document.getElementById("editState").value = address.state;
            document.getElementById("editStateDropdown").textContent = address.state;

            const editAddressModal = new bootstrap.Modal(document.getElementById("editAddressModal"));
            editAddressModal.show();
        });
    }

    // Change Address Button Click
    const changeAddressBtn = document.getElementById("changeAddressBtn");
    if (changeAddressBtn) {
        changeAddressBtn.addEventListener("click", function() {
            const changeAddressModal = new bootstrap.Modal(document.getElementById("changeAddressModal"));
            changeAddressModal.show();
        });
    }

    // Use This Address Button Click
    const useThisAddressBtn = document.getElementById("useThisAddressBtn");
    if (useThisAddressBtn) {
        useThisAddressBtn.addEventListener("click", function() {
            const selectedAddressRadio = document.querySelector('input[name="address"]:checked');
            if (!selectedAddressRadio) {
                alert("Please select an address");
                return;
            }
            
            const selectedAddressId = selectedAddressRadio.value;
            
            fetch("/update-default-address", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    addressId: selectedAddressId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    const selectedAddress = data.selectedAddress;
                    const addressDetailsElement = document.querySelector(".address-details");
                    
                    if (addressDetailsElement) {
                        addressDetailsElement.innerHTML = `
                            <strong>${selectedAddress.name}</strong>
                            <p>${selectedAddress.addressType}</p>
                            <p>${selectedAddress.city}, ${selectedAddress.state} - ${selectedAddress.pincode}</p>
                            <p>Phone: ${selectedAddress.phone}</p>
                        `;
                    }
                    
                    const changeAddressModal = bootstrap.Modal.getInstance(document.getElementById("changeAddressModal"));
                    if (changeAddressModal) {
                        changeAddressModal.hide();
                    }
                    
                    // Refresh the page to reflect changes
                    location.reload();
                } else {
                    alert(data.message || "Error updating address");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Something went wrong. Please try again.");
            });
        });
    }

    // Add New Address Button Click
    const addNewAddressBtn = document.getElementById("addNewAddressBtn");
    if (addNewAddressBtn) {
        addNewAddressBtn.addEventListener("click", function() {
            const stateDropdownBtn = document.getElementById("stateDropdown");
            if (stateDropdownBtn) {
                stateDropdownBtn.textContent = "Select State";
            }
            
            const stateInput = document.getElementById("state");
            if (stateInput) {
                stateInput.value = "";
            }

            const changeAddressModal = bootstrap.Modal.getInstance(document.getElementById("changeAddressModal"));
            if (changeAddressModal) {
                changeAddressModal.hide();
            }

            const addNewAddressModal = new bootstrap.Modal(document.getElementById("addNewAddressModal"));
            addNewAddressModal.show();
        });
    }

    // Form Submissions
    setupFormSubmissions();
});

function setupFormSubmissions() {
    // Add Address Form Submission
    const addAddressForm = document.getElementById("addAddressForm");
    if (addAddressForm) {
        addAddressForm.addEventListener("submit", function(event) {
            event.preventDefault();
            
            const formData = new FormData(addAddressForm);
            const dataObject = {};
            formData.forEach((value, key) => {
                dataObject[key] = value;
            });
            
            // Validation code remains the same
            if (!validateAddressForm(dataObject)) {
                return;
            }
            
            fetch("/addAddress", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(dataObject),
            })
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    const addNewAddressModal = bootstrap.Modal.getInstance(document.getElementById("addNewAddressModal"));
                    if (addNewAddressModal) {
                        addNewAddressModal.hide();
                    }
                    
                    // Show success message and reload
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Added Successfully',
                            text: 'Your new address has been added.',
                            confirmButtonText: 'Okay',
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        alert('Address added successfully!');
                        location.reload();
                    }
                } else {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error Adding Address',
                            text: data.message || 'There was an error adding your address.',
                            confirmButtonText: 'Okay',
                        });
                    } else {
                        alert(data.message || 'Error adding address');
                    }
                }
            })
            .catch(error => {
                console.error("Error adding address:", error);
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Something Went Wrong',
                        text: 'There was an issue with the server, please try again later.',
                        confirmButtonText: 'Okay',
                    });
                } else {
                    alert('Something went wrong. Please try again.');
                }
            });
        });
    }

    // Edit Address Form Submission
    const editAddressForm = document.getElementById("editAddressForm");
    if (editAddressForm) {
        editAddressForm.addEventListener("submit", function(event) {
            event.preventDefault();
            
            const formData = new FormData(editAddressForm);
            const dataObject = {};
            formData.forEach((value, key) => {
                dataObject[key] = value;
            });

            // Get the addressId from a hidden input field
            const addressId = document.getElementById("editAddressId").value;
            
            // Validation code remains the same
            if (!validateAddressForm(dataObject)) {
                return;
            }
            
            fetch(`/editAddress?id=${addressId}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(dataObject),
            })
            .then(response => response.json())
            .then(data => {
                if (data.status) {
                    const editAddressModal = bootstrap.Modal.getInstance(document.getElementById("editAddressModal"));
                    if (editAddressModal) {
                        editAddressModal.hide();
                    }
                    
                    // Update address details without page reload
                    const addressDetailsElement = document.querySelector(".address-details");
                    if (addressDetailsElement) {
                        addressDetailsElement.innerHTML = `
                            <strong>${data.updatedAddress.name}</strong>
                            <p>${data.updatedAddress.addressType}</p>
                            <p>${data.updatedAddress.city}, ${data.updatedAddress.state} - ${data.updatedAddress.pincode}</p>
                            <p>Phone: ${data.updatedAddress.phone}</p>
                        `;
                    }
                    
                    // Show success message and reload
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'success',
                            title: 'Address Updated Successfully',
                            text: 'Your address has been updated.',
                            confirmButtonText: 'Okay',
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        alert('Address updated successfully!');
                        location.reload();
                    }
                } else {
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error Updating Address',
                            text: data.message || 'There was an error updating your address.',
                            confirmButtonText: 'Okay',
                        });
                    } else {
                        alert(data.message || 'Error updating address');
                    }
                }
            })
            .catch(error => {
                console.error("Error updating address:", error);
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Something Went Wrong',
                        text: 'There was an issue with the server, please try again later.',
                        confirmButtonText: 'Okay',
                    });
                } else {
                    alert('Something went wrong. Please try again.');
                }
            });
        });
    }
}

function validateAddressForm(dataObject) {
    // Form Validation
    const requiredFields = [
        'addressType', 'name', 'city', 'state', 'pincode', 'phone'
    ];

    for (let field of requiredFields) {
        if (!dataObject[field]) {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: `Please fill in the ${field.charAt(0).toUpperCase() + field.slice(1)} field.`,
                    confirmButtonText: 'Okay',
                });
            } else {
                alert(`Please fill in the ${field} field.`);
            }
            return false;
          }
        }
      }
</script>



<%- include("../../views/partials/user/footer") %>
