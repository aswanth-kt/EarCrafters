<%- include("../../views/partials/user/header") %>
<style>
 .card-green {
   background-color: #ADD8E6;
 }
 .main {
   padding: 30px 0;
 }


 .dashboard-menu {
   background-color: #cce3e6;
   border-radius: 10px;
   padding: 15px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
 }


 .dashboard-menu .nav-link {
 font-weight: bold;
 color: #30683c;
 box-shadow: 0 4px 10px rgba(123, 131, 112, 0.3), 0 4px 20px rgba(0, 191, 255, 0.2);
 transition: box-shadow 0.3s ease;
}


.dashboard-menu .nav-link:hover {
 color: #00bfff;
 box-shadow: 0 4px 15px rgba(173, 255, 47, 0.5), 0 6px 25px rgba(0, 191, 255, 0.4);
}


 .card {
   border-radius: 10px;
   box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
   margin-bottom: 20px;
 }


 .card-header {
   background-color: #487379;
   color: white;
   border-radius: 10px 10px 0 0;
 }


 .btn-success {
   background-color: #577194;
   border-color: #6bb87d;
 }


 .btn-success:hover {
   background-color: #506955;
 }


 .form-group {
   margin-bottom: 15px;
 }


 .required {
   color: red;
 }


  @media (max-width: 768px) {
   .dashboard-menu {
     padding: 10px;
   }


   .card {
     margin-bottom: 15px;
   }
 }
 .page-header.breadcrumb-wrap {
 background-color: #eee2e9;
 padding: 15px 0;
}


.breadcrumb {
 display: flex;
 align-items: center;
 font-family: 'Arial', sans-serif;
 font-size: 16px;
 color: #121311;
}


.breadcrumb a {
 color: #007bff;
 text-decoration: none;
 position: relative;
 margin: 0 5px;
}


.breadcrumb a:hover {
 color: #0056b3;
}


.breadcrumb span {
 margin: 0 5px;
 color: #999;
}


.breadcrumb a::after {
 content: '';
 position: absolute;
 width: 100%;
 height: 2px;
 background: #6e6e3a;
 left: 0;
 bottom: -2px;
 transform: scaleX(0);
 transition: transform 0.3s ease;
}

.breadcrumb a:hover::after {
 transform: scaleX(1);
}


/* Pagination */
.pagination {
  margin: 2rem 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.pagination ul {
  display: flex;
  gap: 0.5rem;
  list-style: none;
  padding: 0;
  margin: 0;
  justify-content: center;
}

.pagination li a {
  display: block;
  padding: 0.5rem 1rem;
  text-decoration: none;
  color: #333;
  border: 1px solid #ddd;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.pagination li a:hover {
  background-color: #f0f0f0;
  border-color: #ccc;
}

.pagination li a.active {
  background-color: #007bff;
  color: white;
  border-color: #007bff;
  cursor: default;
}

.pagination li.ellipsis span {
  display: block;
  padding: 0.5rem 1rem;
  color: #666;
  cursor: default;
}

.pagination li a.arrow {
  font-weight: bold;
  background-color: #f8f9fa;
}
</style>


<main class="main">
 <div class="page-header breadcrumb-wrap mb-3">
   <div class="container">
     <div class="breadcrumb">
       <a href="/" rel="nofollow">Home</a>
       <span></span>Profile <span></span>Dashboard
     </div>
   </div>
 </div>
  <section class="pt-10 pb-10">
   <div class="container">
     <div class="row">
       <div class="col-lg-10 m-auto">
         <div class="row">
           <div class="col-md-4">
             <div class="dashboard-menu">
               <ul class="nav flex-column" role="tablist">

                 <li class="nav-item">
                   <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="false">
                     <i class="fi-rs-settings-sliders mr-10"></i>Profile
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="true">
                     <i class="fi-rs-marker mr-10"></i>My Address
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                     <i class="fi-rs-shopping-bag mr-10"></i>Orders
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-wallet-tab" data-bs-toggle="tab" href="#wallet" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet
                   </a>
                 </li>
                 <li class="nav-item">
                   <a class="nav-link" id="track-wallet-history-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                   </a>
                 </li>
                 <!-- <li class="nav-item">
                   <a class="nav-link" id="track-referal-tab" data-bs-toggle="tab" href="#referal" role="tab" aria-controls="track-orders" aria-selected="false">
                     <i class="fi-rs-shopping-cart-check mr-10"></i>Referals
                   </a>
                 </li> -->
                 <li class="nav-item">
                   <a class="nav-link" href="/logout">
                     <i class="fi-rs-sign-out mr-10"></i>Logout
                   </a>
                 </li>

               </ul>
             </div>
           </div>
           <div class="col-md-8">
             <div class="tab-content dashboard-content">

                <!-- Dashboard -->
               <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                 <div class="card card-green">
                   <div class="card-header">
                     <h5 class="mb-0 text-center">User Profile</h5>
                   </div>
                   <div class="card-body text-center">
                     <h5 class="card-title"> <%= user.name %> </h5>
                     <p class="card-text">
                       <strong>Phone: <%= user.phone || "Not available" %></strong>
                     </p>
                     <p class="card-text">
                       <strong>Email: <%= user.email %></strong>
                     </p>
                     <a href="/edit-userProfile" class="btn btn-sm btn-success ml-2">Edit Profile</a>
                   </div>
                 </div>
               </div>

               <!-- Address -->
               <div
                 class="tab-pane fade"
                 id="address"
                 role="tabpanel"
                 aria-labelledby="address-tab"
               >
                <div class="row">

                  <% if (userAddress) { %>
                    <% userAddress.address.forEach((address) => { %>
                
                   <div class="col-lg-6">
                     <div class="card mb-3 mb-lg-0">
                       <div class="card-header">
                         <h5 class="mb-0"> <%= address.addressType %> </h5>
                       </div>


                       <div class="card-body">
                         <address>
                          <%= address.name %> <br>
                          <%= address.city %> <br>
                          <%= address.landMark %> <br>
                          <%= address.state %> 
                         </address>
                         <p> <%= address.pincode %> </p>
                         <p> <%= address.phone %> </p>
                         <p> <%= address.altPhone %> </p>
                      
                         <div class="d-flex justify-content-between">
                           <a href="/editAddress?id=<%= address._id %>" class="btn-small">Edit</a>
                           <a href="/deleteAddress?id=<%= address._id %>" class="btn-small" onclick="return confirm('Are you sure you want to delete this address')">Delete</a>
                         </div>
                        
                       </div>
                     </div>
                   </div>
                    <% }) %>
                  <% } else{ %>
                    
                   <div class="col-lg-6">
                     <div class="card mb-3 mb-lg-0">
                       <div class="card-header">
                         <h5 class="mb-0"></h5>
                       </div>
                       <div class="card-body">
                         <address>No address</address>
                       </div>
                     </div>
                   </div>
                  <% } %>
                  <br>
                   <div>
                     <a href="/addAddress">
                       <button class="btn btn-primary w-70">
                         Add address
                       </button>
                     </a>
                   </div>
                 </div>
               </div>

               <!-- Orders -->
               <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                <div class="card">
                  <div class="card-header">
                    <h3 class="mb-0">Your Orders</h3>
                  </div>
                  <% if (ordersData && ordersData.length > 0) { %>
                    <% ordersData.forEach((order) => { %>  
                      <div class="card-body">
                        <div class="card mb-3">
                          <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3 pb-3 border-bottom">
                              <div class="fw-bold">Order ID: <span class="text-muted"><%= order.orderId %></span></div>
                              <div class="text-muted small">Placed on: <%= new Date(order.createdOn).toLocaleDateString() %></div>
                            </div>
                            
                            <div class="row mb-3">
                              <div class="col-md-4 mb-2 mb-md-0">
                                <div class="text-muted">Items:
                                  <span class="fw-semibold"><%= order.orderItems.length %></span>
                                </div>
                                
                              </div>
                              
                              <div class="col-md-4 mb-2 mb-md-0">
                                <div class="text-muted">Payment method:</div>
                                <div class="fw-semibold"><%= order.paymentMethod.toUpperCase() %></div>
                              </div>
                              
                              <div class="col-md-4">
                                <div class="text-muted">Status:</div>
                                <span class="badge bg-primary rounded-pill px-3 py-2"><%= order.status %></span>
                              </div>
                            </div>
                            
                            <div class="text-end">
                              <a href="/track-orders?orderId=<%= order._id %>" class="btn-small btn-outline-secondary me-2">Track Package</a>
                              <a href="/order-details?orderId=<%= order._id %>" class="btn-small d-inline-block">Order Details</a>
                            </div>
                          </div>
                        </div>                    
                      </div>
                    <% }) %>
                 
                </div>
                <% } else {%>
                  <div >
                    <br><br>
                    <h4 class="d-flex justify-content-center align-middle">No Orders Found go to</h4> <br>
                    <div class="d-flex justify-content-center align-middle">
                      <a href="/shop">
                        <button class="btn btn-outline-info ">Shop</button>
                      </a>
                    </div>
                  </div>
                  <% } %>

                <!-- <div class="pagination">
                  <ul>
                    <% if (currentPage > 1) { %>
                        <li><a href="?page=<%= currentPage - 1%>"> « </a></li>
                    <% } %>
        
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li><a href="#orders?page=<%= i %>" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a></li>
                    <% } %>
        
                    <% if (currentPage < totalPages) { %>
                        <li><a href="?page=<%= totalPages + 1 %>"> » </a></li>
                    <% } %>
                  </ul>
                </div> -->

                <div class="pagination">
                  <ul>
                    <% if (currentPage > 1) { %>
                      <li><a href="?page=<%= currentPage - 1 %>/#orders" class="arrow">&laquo;</a></li>
                    <% } %>
                
                    <% 
                      let startPage = Math.max(1, currentPage - 2);
                      let endPage = Math.min(totalPages, currentPage + 2);
                
                      if (startPage > 1) { 
                    %>
                      <li><a href="?page=1/#orders">1</a></li>
                      <% if (startPage > 2) { %>
                        <li class="ellipsis"><span>...</span></li>
                      <% } %>
                    <% } %>
                
                    <% for (let i = startPage; i <= endPage; i++) { %>
                      <li><a href="?page=<%= i %>/#orders" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a></li>
                    <% } %>
                
                    <% if (endPage < totalPages) { %>
                      <% if (endPage < totalPages - 1) { %>
                        <li class="ellipsis"><span>...</span></li>
                      <% } %>
                      <li><a href="?page=<%= totalPages %>/#orders"><%= totalPages %></a></li>
                    <% } %>
                
                    <% if (currentPage < totalPages) { %>
                      <li><a href="?page=<%= currentPage + 1 %>/#orders" class="arrow">&raquo;</a></li>
                    <% } %>
                  </ul>
                </div>
              </div>


              <!-- Wallet -->
               <div class="tab-pane fade" id="wallet" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet</h5>
                   </div>
                   <div class="card-body contact-from-area">
                     <div class="row">
                       <div class="col-lg-8 mx-auto text-center mt-90">
                         <form id="addMoneyForm">
                           <div class="form-group">
                             <label for="walletAmount" class="h4">Amount</label>
                             <!-- <div class="h3">0.00</div> -->
                             <% if (wallet && wallet.balance !== undefined) { %>
                              <p class="h5 text-muted mb-0">&#8377; <%= wallet.balance.toFixed(2) %></p>
                              <% } else { %>
                              <p class="h5 text-muted mb-0">&#8377; 0.00</p>
                              <% } %>
                           </div>
                           <button type="button" class="btn btn-success" onclick="addMoney()" data-toggle="modal" data-target="#addMoneyModal">Add Money</button>
                         </form>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>


              <!-- Modal for Adding Money -->
              <div class="modal fade" id="addMoneyModal" tabindex="-1" role="dialog" aria-labelledby="addMoneyModalLabel" >
                <div class="modal-dialog modal-dialog-centered" role="document">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span >&times;</span>
                      </button>
                    </div>
                    <form id="addMoneyModalForm">
                      <div class="modal-body">
                        <div class="form-group">
                          <label for="amount">Amount</label>
                          <input type="number" class="form-control" id="amount" name="amount" required placeholder="Enter amount to add" min="0.01" step="0.01">
                        </div>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary" onclick="addMoney()">Add Money</button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>


               <!-- Wallet History -->
               <!-- <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="history-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Wallet History</h5>
                   </div>
                   <div class="card-body">
                     <div class="table-responsive">
                       <table class="table">
                         <thead>
                           <tr>
                             <th>Date</th>
                             <th>Transaction</th>
                             <th>Type</th>
                             <th>Amount</th>
                             <th>Balance</th>
                           </tr>
                         </thead>
                         <tbody id="walletHistoryBody">
                            <tr>
                              <td id="createdAt"></td>
                              <td id="description"></td>
                              <td id="type" class=""></td>
                              <td id="amount" class=""></td>
                              <td id="balance"></td>
                            </tr>
                         </tbody>
                       </table>
                     </div>
                   </div>
                 </div>
               </div>
                -->
               <!-- Wallet transaction pagination -->
                <!-- <div class="pagination">
                  <ul>
                    <% if (currentPage > 1) { %>
                        <li><a href="?page=<%= currentPage - 1%>"> « </a></li>
                    <% } %>
        
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li><a href="#orders?page=<%= i %>" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a></li>
                    <% } %>
        
                    <% if (currentPage < totalPages) { %>
                        <li><a href="?page=<%= totalPages + 1 %>"> » </a></li>
                    <% } %>
                  </ul>
                </div> -->

                <!-- Updated Wallet History Tab Section -->
                <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="history-tab">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Wallet History</h5>      
                    </div>
                    <div class="card-body">
                      <div class="table-responsive">
                        <table class="table">
                          <thead>
                            <tr>
                              <th>Date</th>
                              <th>Transaction</th>
                              <th>Type</th>
                              <th>Amount</th>
                              <th>Balance</th>
                            </tr>
                          </thead>
                          <tbody id="walletHistoryBody">
                            <tr>
                              <td colspan="5" class="text-center">Loading transaction history...</td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                      
                      <!-- Wallet History Pagination -->
                      <div class="pagination" id="wallet-history-pagination">
                        <ul>
                          <!-- Pagination will be populated by JavaScript -->
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>



               <!-- <div class="tab-pane fade" id="referal" role="tabpanel" aria-labelledby="track-orders-tab">
                 <div class="card">
                   <div class="card-header">
                     <h5 class="mb-0">Referal</h5>
                   </div>
                   <div class="card-body">
                     <h6 class="mb-3">Refer your friends and earn money!</h6>
                     <p>Share this link: <strong>></strong></p>
                     <p>Earned: ₹</p>
                   </div>
                 </div>
               </div> -->
       </div>
     </div>
   </div>
 </section>
</main>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>

  // Function to open the add money modal
function addMoney() {
  document.activeElement.blur(); // clears focus from modal
  $('#addMoneyModal').modal('hide');
}

  document.getElementById("addMoneyModalForm").addEventListener("submit", function(e){
    e.preventDefault();
    const amount = parseFloat(document.getElementById("amount").value); // convert to number
    console.log("Submitting amount:", amount);

    if (isNaN(amount) || amount <= 0) {
      Swal.fire({
        title: "Error",
        text: "Please enter a valid amount greater that zero",
        icon: "error",
        timer: 1500,
      });
      return;
    };

     // Show loading state
    const submitButton = this.querySelector('button[type="submit"]');
    const originalText = submitButton.innerHTML;
    submitButton.disabled = true;
    submitButton.innerHTML = 'Processing...';

    fetch("/wallet/add-money", {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({amount}),
    })
    .then(response => {
      return response.json();
    })
    .then(data => { 
      console.log("data:", data); // Debugging

      // Reset button state
      submitButton.disabled = false;
      submitButton.innerHTML = originalText;

      if (data.status) {

        // Money add with Razorpay
        if (typeof Razorpay === "undefined") {
          console.error("Razorpay is not loaded!");
          Swal.fire({
              icon: 'error',
              title: 'Payment Error',
              text: 'Payment gateway not available. Please try again later.'
          });
          return;
        };
        
        var options = {
          key: data.razorpayKey,
          amount: data.amount,
          currency: data.currency,
          name: "EarCrafters",
          description: "Add money to wallet",
          order_id: data.razorpayOrderId,
          handler: function(response) {
              console.log("Payment successful, response:", response);
              Swal.fire({
                  toast: true,
                  position: 'top-end',
                  icon: 'success',
                  title: 'Your payment has been successfully completed.',
                  showConfirmButton: false,
                  timer: 3000
              })
              .then(() => {
                  window.location.reload();
              })
          },
          // Adding a failure handler to the razorpay options
          "prefill": {
              name: data.userData.name,
              email: data.userData.email,
          },
          "theme": {
              "color": "#F37254"
          },
          "modal": {
              "ondismiss": function() {
              console.log('Payment window was closed before completing.');
              }
          },
        };

        console.log("Razorpay options:", options);
                      
        var rzp1 = new Razorpay(options);
        try {

            console.log("Razorpay open");
            rzp1.open();
            
        } catch (error) {
          console.error("Error opening Razorpay window:", error);
          window.location.reload();     // Redirect to the failure page
        }

        // Handle Razorpay payment failure
        rzp1.on('payment.failed', function(response) {
          console.log("Payment failed:", response);
          Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Payment failed. Please try again later',
              showConfirmButton: false,
              timer: 3000
          })
          .then(() => {
              window.location.href = `/wallet/add-money/failed?amount=${amount}`;  //Redirect to wallet page
          })
        })

        // Display success alert with the wallet balance
        Swal.fire({
          title: "Success!",
          text: data.message + '\nNew Balance: ₹' + data.wallet.balance.toFixed(2),  // Change to Rs
          icon: "success",
          confirmButtonText: "OK",
        }).then(() => {
          // location.reload();
          document.querySelector('.card-body .h5').textContent = `₹${data.wallet.balance.toFixed(2)}` //Change to rs
          $('#addMoneyModal').modal('hide');  // Hide the model after success
          // location.reload()
          // window.location.href = "/userProfile/#wallet"
          
          document.getElementById("amount").value = ''; // Optionally clear the input
        });

      } else {
        Swal.fire({
          title: 'Error',
          text: data.message || 'Failed to add money to wallet.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }).catch(err => {
      // Reset button state
      submitButton.disabled = false;
      submitButton.innerHTML = originalText;
      console.error("Error:", err); // Debugging
      Swal.fire({
        title: 'Error',
        text: 'An error occurred while adding money.',
        icon: 'error',
        confirmButtonText: 'OK'
      })
    })
  });


//   // Load wallet history when the tab is clicked
// document.getElementById('track-wallet-history-tab').addEventListener('click', function(e) {
//   // Load the wallet history when this tab is clicked
//   loadWalletHistory();
//   console.log("Call loadWalletHistory()");
// });

// function loadWalletHistory(page = 1) {
//   console.log("Load wallet history");
//   fetch(`/wallet/history?page=${page}`)
//     .then(response => response.json())
//     .then(data => {
//       const historyTableBody = document.getElementById('walletHistoryBody');
//       // Clear loading message
//       historyTableBody.innerHTML = '';
      
//       if (data.status && data.transactions && data.transactions.length > 0) {
//         data.transactions.sort((a, b) => new Date(b.date) - new Date(a.date));
        
//         // Add transaction rows
//         data.transactions.forEach(transaction => {
//           const date = new Date(transaction.createdAt).toLocaleDateString();
//           const type = transaction.type;
//           const amountClass = transaction.type === 'credit' ? 'text-success' : 'text-danger';
//           const amount = transaction.amount;
//           const typeClass = transaction.type === 'credit' ? 'text-success' : 'text-danger';
          
//           historyTableBody.innerHTML += `
//             <tr>
//               <td>${date}</td>
//               <td>${transaction.description}</td>
//               <td class="${typeClass}">${type}</td>
//               <td class="${amountClass}">${amount}</td>
//               <td>₹${transaction.balance.toFixed(2)}</td>
//             </tr>
//           `;
//         });
//       } else {
//         historyTableBody.innerHTML = '<tr><td colspan="4" class="text-center">No transaction history found</td></tr>';
//       }
//     })
//     .catch(error => {
//       console.error('Error loading wallet history:', error);
//       document.getElementById('walletHistoryBody').innerHTML = 
//         '<tr><td colspan="4" class="text-center text-danger">Failed to load transaction history</td></tr>';
//     });
// }



  // Global variable to track wallet history state
  let walletHistoryState = {
    currentPage: 1,
    totalPages: 1
  };

  // Load wallet history when the tab is clicked
  document.getElementById('track-wallet-history-tab').addEventListener('click', function(e) {
    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('wallet-page') || 1;
    loadWalletHistory(page);
  });

  function loadWalletHistory(page = 1) {
    document.getElementById('walletHistoryBody').innerHTML = '<tr><td colspan="5" class="text-center">Loading transaction history...</td></tr>';
    
    fetch(`/wallet/history?page=${page}`)
      .then(response => response.json())
      .then(data => {
        const historyTableBody = document.getElementById('walletHistoryBody');
        // Clear loading message
        historyTableBody.innerHTML = '';
        
        // Update pagination state
        walletHistoryState.currentPage = data.currentPage;
        walletHistoryState.totalPages = data.totalPages;
        
        if (data.status && data.transactions && data.transactions.length > 0) {
          // Add transaction rows
          data.transactions.forEach(transaction => {
            const date = new Date(transaction.createdAt).toLocaleDateString();
            const type = transaction.type;
            const amountClass = transaction.type === 'credit' ? 'text-success' : 'text-danger';
            const amount = transaction.amount;
            const typeClass = transaction.type === 'credit' ? 'text-success' : 'text-danger';
            
            historyTableBody.innerHTML += `
              <tr>
                <td>${date}</td>
                <td>${transaction.description}</td>
                <td class="${typeClass}">${type}</td>
                <td class="${amountClass}">₹${amount.toFixed(2)}</td>
                <td>₹${transaction.balance.toFixed(2)}</td>
              </tr>
            `;
          });
          
          // Update the pagination UI
          updateWalletHistoryPagination(data.currentPage, data.totalPages);
        } else {
          historyTableBody.innerHTML = '<tr><td colspan="5" class="text-center">No transaction history found</td></tr>';
          document.getElementById('wallet-history-pagination').style.display = 'none';
        }
      })
      .catch(error => {
        console.error('Error loading wallet history:', error);
        document.getElementById('walletHistoryBody').innerHTML = 
          '<tr><td colspan="5" class="text-center text-danger">Failed to load transaction history</td></tr>';
      });
  }

  // Function to update wallet history pagination UI
  function updateWalletHistoryPagination(currentPage, totalPages) {
    const paginationElement = document.getElementById('wallet-history-pagination');
    
    if (totalPages <= 1) {
      paginationElement.style.display = 'none';
      return;
    }
    
    paginationElement.style.display = 'block';
    const paginationList = paginationElement.querySelector('ul');
    paginationList.innerHTML = '';
    
    // Previous page button
    if (currentPage > 1) {
      const prevLi = document.createElement('li');
      prevLi.innerHTML = `<a href="?wallet-page=${currentPage - 1}#wallet-history" class="arrow">&laquo;</a>`;
      paginationList.appendChild(prevLi);
    }
    
    // Calculate page range to display
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, currentPage + 2);
    
    // Always show first page
    if (startPage > 1) {
      paginationList.appendChild(createPageItem(1, currentPage, '#wallet-history'));
      
      // Show ellipsis if needed
      if (startPage > 2) {
        const ellipsisLi = document.createElement('li');
        ellipsisLi.className = 'ellipsis';
        ellipsisLi.innerHTML = '<span>...</span>';
        paginationList.appendChild(ellipsisLi);
      }
    }
    
    // Show page numbers
    for (let i = startPage; i <= endPage; i++) {
      paginationList.appendChild(createPageItem(i, currentPage, '#wallet-history'));
    }
    
    // Always show last page
    if (endPage < totalPages) {
      // Show ellipsis if needed
      if (endPage < totalPages - 1) {
        const ellipsisLi = document.createElement('li');
        ellipsisLi.className = 'ellipsis';
        ellipsisLi.innerHTML = '<span>...</span>';
        paginationList.appendChild(ellipsisLi);
      }
      
      paginationList.appendChild(createPageItem(totalPages, currentPage, '#wallet-history'));
    }
    
    // Next page button
    if (currentPage < totalPages) {
      const nextLi = document.createElement('li');
      nextLi.innerHTML = `<a href="?wallet-page=${currentPage + 1}#wallet-history" class="arrow">&raquo;</a>`;
      paginationList.appendChild(nextLi);
    }
  }

  // Helper function to create page item
  function createPageItem(pageNumber, currentPage, hashTag) {
    const li = document.createElement('li');
    const isActive = pageNumber === currentPage;
    li.innerHTML = `<a href="?wallet-page=${pageNumber}${hashTag}" class="${isActive ? 'active' : ''}">${pageNumber}</a>`;
    return li;
  }

  // Check if URL has wallet-history hash and load the tab
  document.addEventListener('DOMContentLoaded', function() {
    if (window.location.hash === '#wallet-history') {
      document.getElementById('track-wallet-history-tab').click();
      
      // Get page from URL
      const urlParams = new URLSearchParams(window.location.search);
      const page = urlParams.get('wallet-page') || 1;
      loadWalletHistory(page);
    }
  });

  // Add event delegation for pagination links
  document.getElementById('wallet-history-pagination').addEventListener('click', function(event) {
    if (event.target.tagName === 'A') {
      event.preventDefault();
      const href = event.target.getAttribute('href');
      const urlParams = new URLSearchParams(href.split('?')[1]);
      const page = urlParams.get('wallet-page') || 1;
      
      // Update URL without reloading the page
      const newUrl = `${window.location.pathname}?wallet-page=${page}#wallet-history`;
      window.history.pushState({}, '', newUrl);
      
      // Load wallet history for the new page
      loadWalletHistory(page);
    }
  });


  // Check if there's a hash in the URL
  document.addEventListener('DOMContentLoaded', function() {
    // If URL has a hash that matches a tab ID
    if(window.location.hash) {
      const tabId = window.location.hash.substring(1); // Remove the # character
      
      // Find the tab link and click it programmatically
      const tabLink = document.querySelector(`#${tabId}-tab`);
      if(tabLink) {
        tabLink.click();
      }
    }
  });

</script>

<%- include("../../views/partials/user/footer") %>
