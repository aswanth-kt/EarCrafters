<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - YourStore</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f8f9fa;
            color: #212529;
            line-height: 1.6;
        }
        
        .checkout-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
        }
        
        .checkout-form {
            flex: 1;
            min-width: 320px;
        }
        
        .order-summary {
            width: 380px;
            min-width: 320px;
        }
        
        .checkout-section {
            background-color: #ffffff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .section-title {
            font-size: 18px;
            margin-bottom: 15px;
            font-weight: 600;
            color: #333;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .edit-btn {
            background-color: transparent;
            border: none;
            color: #4a6ee0;
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
        }
        
        .address-card {
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            position: relative;
            margin-bottom: 15px;
        }
        
        .address-card.selected {
            border-color: #4a6ee0;
            background-color: #f0f4ff;
        }
        
        .address-default-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #e6f7e6;
            color: #28a745;
            font-size: 12px;
            padding: 2px 8px;
            border-radius: 3px;
        }
        
        .address-action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .address-action-btn {
            background-color: transparent;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
        }
        
        .address-action-btn:hover {
            background-color: #f8f9fa;
        }
        
        .address-list-container {
            margin-top: 15px;
            display: none;
        }
        
        .add-new-address {
            color: #4a6ee0;
            background-color: transparent;
            border: 1px dashed #4a6ee0;
            border-radius: 5px;
            padding: 15px;
            width: 100%;
            text-align: center;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .add-new-address:hover {
            background-color: #f0f4ff;
        }
        
        .coupon-section {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        
        .coupon-input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            min-width: 150px;
        }
        
        .coupon-button {
            padding: 10px 20px;
            background-color: #4a6ee0;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        
        .coupon-button:hover {
            background-color: #3a5bbf;
        }
        
        .coupon-list {
            width: 100%;
            margin-top: 15px;
            display: none;
        }
        
        .coupon-item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
        }
        
        .coupon-item:hover {
            background-color: #f0f4ff;
            border-color: #4a6ee0;
        }
        
        .coupon-code {
            font-weight: 600;
            color: #4a6ee0;
        }
        
        .coupon-details {
            font-size: 14px;
            color: #666;
        }
        
        .coupon-validity {
            font-size: 12px;
            color: #28a745;
        }
        
        .expired {
            color: #dc3545;
        }
        
        .payment-methods {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .payment-method {
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .payment-method:hover {
            background-color: #f8f9fa;
        }
        
        /* .payment-method.selected {
            border-color: #4a6ee0;
            background-color: #f0f4ff;
        } */
        
        .payment-radio {
            width: 20px;
            height: 20px;
            accent-color: #4a6ee0;
        }
        
        .payment-logo {
            height: 24px;
            width: 40px;
            object-fit: contain;
        }
        
        .payment-name {
            flex: 1;
            font-weight: 500;
        }
        
        .product-item {
            display: flex;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .product-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            margin-right: 15px;
        }
        
        .product-details {
            flex: 1;
        }
        
        .product-name {
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .product-price {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
        }
        
        .price-details {
            margin-top: 15px;
        }
        
        .price-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .price-label {
            color: #666;
        }
        
        .discount-text {
            color: #28a745;
        }
        
        .total-row {
            font-weight: 600;
            font-size: 18px;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }
        
        .place-order-btn {
            width: 100%;
            padding: 15px;
            background-color: #4a6ee0;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 20px;
        }
        
        .place-order-btn:hover {
            background-color: #3a5bbf;
        }

        @media (max-width: 768px) {
            .checkout-container {
                flex-direction: column;
            }
            
            .order-summary {
                width: 100%;
            }
        }

        .grand-total-wrapper {
            margin-top: 20px;
        }

        .total-divider {
            height: 1px;
            background-color: #e0e0e0;
            margin: 15px 0;
        }

        .grand-total {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
        }

        .total-label {
            font-size: 18px;
            font-weight: 600;
        }

        .total-amount {
            font-size: 22px;
            font-weight: 700;
            color: #2a2a2a;
        }

         /* Loading overlay adjustments */
        @media (max-width: 768px) {
            #loadingOverlay {
                padding: 20px;
            }
        
            #loadingSpinner {
                font-size: 0.9rem;
            }
        
            .spinner-border {
                width: 2rem;
                height: 2rem;
            }
        }
    </style>
</head>
<body>

    <div class="page-header breadcrumb-wrap">
        <div class="container">
            <div class="breadcrumb">
                <a href="/" rel="nofollow">Home</a>
                <span></span> <a href="/shop" rel="nofollow">Shop</a>
                <span></span> <a href="/cart" rel="nofollow">Cart</a>
                <span></span> Checkout
            </div>
        </div>
    </div>

    <div class="container">
        <h1>Checkout</h1>

        <div class="checkout-container">
            <div class="checkout-form">
                <!-- Shipping Address Section -->
                <div class="checkout-section">
                    <div class="section-title">
                        <span>Shipping Address</span>
                        <% if (!defaultAddress) { %>
                            <button>Add Address</button>
                        <% } %>
                    </div>
                    
                        <% if (!defaultAddress && defaultAddress.name) { %>
                            <p class="text-center text-warning">Please select an address to proceed with and to add coupon.</p>
                        <% } %>

                        <% if (defaultAddress && defaultAddress.name) { %>
                            <div class="address-card selected">
                                <div class="address-default-badge">Default</div>

                                <strong>
                                    <%= defaultAddress.name %>
                                </strong>
                                <div class="badge badge-secondary">
                                    <%= defaultAddress.addressType %>
                                </div>
                                <p>
                                    <%=defaultAddress.city%>
                                </p>
                                <p>
                                    <%=defaultAddress.landMark%>
                                </p>
                                <p>
                                    <%=defaultAddress.state%>
                                </p>
                                <p>
                                    <%=defaultAddress.phone%>
                                </p>
                                <p>
                                    <%=defaultAddress.altPhone%>
                                </p>

                                <div class="address-action-buttons">
                                    <a href="/editCheckoutAddress?id=<%= defaultAddress._id %>">
                                        <button class="address-action-btn" id="editAddressBtn" onclick="editAddress('<%= defaultAddress._id %>')">Edit</button>
                                    </a>
                                    <button class="address-action-btn" id="changeAddressBtn">Change Address</button>
                                </div>
                            </div>
                        <% } else if (notDefaultAddress) { %>
                            <% Object.entries(notDefaultAddress).forEach(([key, address]) => { %>
                                <div class="address-list-container" id="address-list">
                                    <div class="address-card">

                                        <div class="address-details">
                                            <strong>
                                                <%= address.name %>
                                            </strong>
                                            <p>
                                                <%= address.addressType %>
                                            </p>
                                            <p>
                                                <%= address.city %>, <%= address.state %> - <%=
                                                address.pincode %>
                                            </p>
                                            <p>Phone: <%= address.phone %>
                                            </p>
                                        </div>

                                        <div class="address-action-buttons">
                                            <button class="address-action-btn">Edit</button>
                                            <button class="address-action-btn">Delete</button>
                                            <button class="address-action-btn">Set as Default</button>
                                        </div>
                                    </div>

                                    <button class="add-new-address">
                                        + Add New Address
                                    </button>
                                </div>
                            <% }) %>
                        <% } else { %>
                                <p>No Address Found</p>
                                <a href="/addAddress"><button class="add-new-address">Add Address</button></a>
                            <% } %>
                </div>

                
                <!-- Change Address Modal -->
                <div id="changeAddressModal" class="modal fade" tabindex="-1" aria-labelledby="changeAddressModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="changeAddressModalLabel">
                                    Select Address
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <form id="addressForm">
                                    <% addresses.forEach(function(address) { %>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="address"
                                                id="address<%= address._id %>" value="<%= address._id %>"
                                                <%=address.isDefault ? 'checked' : '' %> />
                                            <label class="form-check-label" for="address<%= address._id %>">
                                                <%= address.name %>, <%= address.addressType %>, <%= address.city %>,
                                                            <%= address.state %> - <%= address.pincode %>
                                            </label>
                                        </div>
                                        <% }) %>
                                </form>
                                <a href="addCheckoutAddress?id=<%= defaultAddress._id %>" class="btn btn-link" id="addNewAddressBtn">Add New Address</a>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                    Close
                                </button>
                                <button type="button" class="btn btn-primary" id="useThisAddressBtn">
                                    Use This Address
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Coupons -->
                <div class="checkout-section">
                    <div class="section-title">Apply Coupon</div>
                    
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label for="couponInput">Enter Coupon Code:</label>
                                <input type="text" id="couponInput" class="form-control" placeholder="Enter coupon code">
                                <div id="couponList" class="dropdown-menu" style="display: none;"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <button id="applyCouponBtn" class="btn btn-primary mt-4">Apply</button>
                            <!-- Remove coupon button will be inserted here by JavaScript -->
                        </div>
                    </div>
                    
                    <div id="discountMessage" class="mt-2"></div>
                    
                    <!-- Available coupons section -->
                    <% if (coupons && coupons.length > 0) { %>
                        <div class="mt-3">
                            <h6 class="text-muted pb-2">Available Coupons</h6>
                            <div class="row">
                                <% coupons.forEach(function(couponItem) { %>
                                    <div class="col-md-6 mb-2">
                                        <div class="coupon-item p-2 border rounded">
                                            <div class="coupon-code font-weight-bold"><%= couponItem.name %></div>
                                            <div class="coupon-details small">
                                                Discount: ₹<%= couponItem.offerPrice %><br>
                                                Min. Purchase: ₹<%= couponItem.minimumPrice %><br>
                                                Expires: <%= new Date(couponItem.expireOn).toLocaleDateString() %>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                    <% } else { %>
                        <p class="text-muted mt-3">No coupons available at the moment.</p>
                    <% } %>
                </div>

                <!-- Order Summary Section - Make sure it includes these elements for coupon integration -->
                <div class="price-details">
                    <div class="price-row">
                        <span class="price-label">Subtotal</span>
                        <span id="subtotal">₹0</span>
                    </div>
                    
                    <div class="price-row">
                        <span class="price-label">Discount</span>
                        <span id="discountAmount">₹0</span>
                    </div>

                    <div class="price-row">
                        <span class="price-label">18% GST</span>
                        <span id="gstAmount">₹<%= gst %></span>
                    </div>
                    
                    <div class="price-row">
                        <span class="price-label">Shipping</span>
                        <span id="shippingFee">₹0</span>
                    </div>
                    
                    <div class="price-row total-row">
                        <span class="price-label">Total</span>
                        <span id="totalAmount">₹<%= grandTotal %></span>
                    </div>
                </div>

                <!-- Payment Methods Section -->
                <div class="checkout-section">
                    <div class="section-title">Payment Method</div>

                    <div class="payment-methods">
                        <div class="payment-method selected">
                            <input type="radio" id="upi" class="payment-radio" name="paymentMethod" checked>
                            <label for="upi" class="payment-name">Payment Gateway</label>
                            <img src="/img/PaymentLogo/upi.png" alt="UPI" class="payment-logo">
                        </div>

                        <div class="payment-method">
                            <input type="radio" id="cod" class="payment-radio" name="paymentMethod">
                            <label for="cod" class="payment-name">Cash On Delivery</label>
                            <img src="/img/PaymentLogo/cod.jpeg" alt="COD" class="payment-logo">
                        </div>

                        <div class="payment-method">
                            <input type="radio" id="wallet" class="payment-radio" name="paymentMethod">
                            <label for="wallet" class="payment-name">Wallet</label>
                            <img src="/img/PaymentLogo/wallet.jpeg" alt="Wallet" class="payment-logo">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary Section -->
            <% let cartItemsData = []; %>   <!-- For pass data to payment controller -->
            <div class="order-summary">
                <div class="checkout-section">
                    <% if(cartData && cartData.length > 0) { %>
                        <div class="section-title">Order Summary</div>

                        
                        <% cartData.forEach((cart) => { %> 
                            <div class="product-item">
                                <img src="/uploads/re-images/<%= cart.productImage[0] %>" alt="<%= cart.productName %>" class="product-img">
                                <div class="product-details">
                                    <div class="product-name"><%= cart.productName %></div>
                                    <div class="product-variant">Color: <%= cart.color %></div>
                                    <div class="product-price">
                                        <span><%= cart.quantity %> × ₹<%= cart.salePrice %></span>
                                        <span><%= cart.totalPrice %></span>
                                    </div>
                                </div>
                            </div>
                            <% cartItemsData.push({
                                product: cart._id,
                                quantity: cart.quantity,
                                price: cart.salePrice,
                                subtotal: cart.totalPrice,
                            }) %>
                        <% }) %>

                        <div class="grand-total-wrapper">
                            <div class="total-divider"></div>
                            <div class="grand-total">
                                <span class="total-label">Grand Total</span>
                                <span class="total-amount">₹<%= grandTotal %></span>
                            </div>
                        </div>
                        <% } %>
                </div>
                <button class="place-order-btn" id="paymentMethodBtn"
                    >Proceed to Pay

                    <!-- Loading Overlay -->
                    <div id="loadingOverlay" class="d-none">
                        <div id="loadingSpinner" class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-white">Processing your request...</p>
                        </div>
                    </div>
                </button>
            </div>
        </div>
    </div>
</body> <br>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>

    document.addEventListener("DOMContentLoaded", function() {
        // Initialize Bootstrap components
        if (typeof bootstrap !== 'undefined') {
            // Edit Address Modal Dropdown Events
            const editDropdownItems = document.querySelectorAll("#editAddressModal .dropdown-item");
            const editStateDropdownBtn = document.getElementById("editStateDropdown");
            const editStateInput = document.getElementById("editState");

            editDropdownItems.forEach(function(item) {
                item.addEventListener("click", function() {
                    const selectedState = item.getAttribute("data-value");
                    if (editStateDropdownBtn) {
                        editStateDropdownBtn.textContent = selectedState;
                    }
                    if (editStateInput) {
                        editStateInput.value = selectedState;
                    }
                });
            });

            // Add New Address Modal Dropdown Events
            const newDropdownItems = document.querySelectorAll("#addNewAddressModal .dropdown-item");
            const newStateDropdownBtn = document.getElementById("stateDropdown");
            const newStateInput = document.getElementById("state");

            newDropdownItems.forEach(function(item) {
                item.addEventListener("click", function() {
                    const selectedState = item.getAttribute("data-value");
                    if (newStateDropdownBtn) {
                        newStateDropdownBtn.textContent = selectedState;
                    }
                    if (newStateInput) {
                        newStateInput.value = selectedState;
                    }
                });
            });
        }

        // Change Address Button Click
        const changeAddressBtn = document.getElementById("changeAddressBtn");
        if (changeAddressBtn) {
            changeAddressBtn.addEventListener("click", function() {
                const changeAddressModal = new bootstrap.Modal(document.getElementById("changeAddressModal"));
                changeAddressModal.show();
            });
        }

        // Use This Address Button Click
        const useThisAddressBtn = document.getElementById("useThisAddressBtn");
        if (useThisAddressBtn) {
            useThisAddressBtn.addEventListener("click", function() {
                const selectedAddressRadio = document.querySelector('input[name="address"]:checked');
                if (!selectedAddressRadio) {
                    alert("Please select an address");
                    return;
                }
                
                const selectedAddressId = selectedAddressRadio.value;
                
                fetch("/update-default-address", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        addressId: selectedAddressId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status) {
                        const selectedAddress = data.selectedAddress;
                        const addressDetailsElement = document.querySelector(".address-details");
                        
                        if (addressDetailsElement) {
                            addressDetailsElement.innerHTML = `
                                <strong>${selectedAddress.name}</strong>
                                <p>${selectedAddress.addressType}</p>
                                <p>${selectedAddress.city}, ${selectedAddress.state} - ${selectedAddress.pincode}</p>
                                <p>Phone: ${selectedAddress.phone}</p>
                            `;
                        }
                        
                        const changeAddressModal = bootstrap.Modal.getInstance(document.getElementById("changeAddressModal"));
                        if (changeAddressModal) {
                            changeAddressModal.hide();
                        }
                        
                        location.reload();
                    } else {
                        alert(data.message || "Error updating address");
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("Something went wrong. Please try again.");
                });
            });
        }

        // Form Submissions
        setupFormSubmissions();
    });

    function setupFormSubmissions() {
        // Add Address Form Submission
        const addAddressForm = document.getElementById("addAddressForm");
        if (addAddressForm) {
            addAddressForm.addEventListener("submit", function(event) {
                event.preventDefault();
                
                const formData = new FormData(addAddressForm);
                const dataObject = {};
                formData.forEach((value, key) => {
                    dataObject[key] = value;
                });
                
                // Validation code remains the same
                if (!validateAddressForm(dataObject)) {
                    return;
                }
                
                fetch("/addAddress", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(dataObject),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status) {
                        const addNewAddressModal = bootstrap.Modal.getInstance(document.getElementById("addNewAddressModal"));
                        if (addNewAddressModal) {
                            addNewAddressModal.hide();
                        }
                        
                        // Show success message and reload
                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                                icon: 'success',
                                title: 'Address Added Successfully',
                                text: 'Your new address has been added.',
                                confirmButtonText: 'Okay',
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            alert('Address added successfully!');
                            location.reload();
                        }
                    } else {
                        if (typeof Swal !== 'undefined') {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error Adding Address',
                                text: data.message || 'There was an error adding your address.',
                                confirmButtonText: 'Okay',
                            });
                        } else {
                            alert(data.message || 'Error adding address');
                        }
                    }
                })
                .catch(error => {
                    console.error("Error adding address:", error);
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Something Went Wrong',
                            text: 'There was an issue with the server, please try again later.',
                            confirmButtonText: 'Okay',
                        });
                    } else {
                        alert('Something went wrong. Please try again.');
                    }
                });
            });
        }
    }

    function validateAddressForm(dataObject) {
        // Form Validation
        const requiredFields = [
            'addressType', 'name', 'city', 'state', 'pincode', 'phone'
        ];

        for (let field of requiredFields) {
            if (!dataObject[field]) {
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: `Please fill in the ${field.charAt(0).toUpperCase() + field.slice(1)} field.`,
                        confirmButtonText: 'Okay',
                    });
                } else {
                    alert(`Please fill in the ${field} field.`);
                }
                return false;
            }
        }
    }
        

    const cartItemsDataJson = '<%- JSON.stringify(cartItemsData) %>';
    // console.log("cartItemsDataJson:", cartItemsDataJson);

    const parseCartItems = JSON.parse(cartItemsDataJson);   //For access subtotal
    // console.log("parse cart items:", parseCartItems);

    // update subtotal in UI
    const subtotalElement = document.getElementById("subtotal");
    subtotalElement.textContent = `₹${parseCartItems[0].subtotal}`;

    // Proceed to Payment function
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById("paymentMethodBtn").addEventListener('click', function() {
            console.log("Clicked payment btn");
            document.getElementById("loadingOverlay").classList.remove("d-none");
            this.disabled = true; // Disable the button to prevent multiple clicks

            const orderItems = JSON.parse(cartItemsDataJson); //to convert that string back into a JavaScript object
            // console.log("cartItemsDataJson :", cartItemsDataJson)
            const addressId = '<%= defaultAddress._id %>';
            const totalPrice = parseInt('<%= grandTotal %>') || 0;
            const discount = parseInt(document.getElementById('discountAmount').textContent.replace('₹', '').trim());
            // console.log("Discount:",discount, typeof discount);
            const finalAmount = totalPrice - discount;
            const status = "Order Placed";
            const couponApplied = discount > 0;
            const customerName = '<%= user.name %>';
            const customerEmail = '<%= user.email %>';
            const gst = '<%= gst %>'
            console.log("Customer name:", customerName, "Customer email:", customerEmail)

            const orderData = {
                orderItems: orderItems,
                addressId: addressId,
                totalPrice: totalPrice,
                discount: discount,
                finalAmount: finalAmount,
                status: status,
                customerName,
                customerEmail,
                couponApplied,
                gst,
            };

            const paymentMethod = document.querySelector("input[name='paymentMethod']:checked").id;
            orderData.paymentMethod = paymentMethod;

            if (paymentMethod === "cod") {
                document.getElementById('loadingOverlay').classList.remove("d-none");
                document.getElementById('paymentMethodBtn').disabled = true;
                // Add this after collecting the order data
                fetch('/checkout/place-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Full data :", data);   //Debug
                    document.getElementById("loadingOverlay").classList.add("d-none");
                    if (data.status) {
                        window.location.href = `/order-success?orderId=${data.orderId}`;
                    } else {
                        Swal.fire({
                            icon: "info",
                            title: "Info",
                            text:  data.message,
                            timer: 3000,
                        });
                        this.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById("loadingOverlay").classList.add("d-none");
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: data.message || "Something went wrong",
                        timer: 3000,
                    });
                    this.disabled = false;
                });

                // Wallet payment
            }else if (paymentMethod === "wallet") {
                document.getElementById('loadingOverlay').classList.remove("d-none");
                document.getElementById('paymentMethodBtn').disabled = true;

                fetch('/payment/wallet', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(orderData)
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Data:", data); //Debug
                    document.getElementById("loadingOverlay").classList.add("d-none");
                    if (data.status) {
                        window.location.href = data.redirectUrl || '';
                    } else {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'warning',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 3000
                        });
                        this.disabled = false;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById("loadingOverlay").classList.add("d-none");
                    alert('Something went wrong with wallet payment. Please try again.');
                    this.disabled = false;
                    document.getElementById('loadingOverlay').classList.add('d-none')
                });

                // Razorpay
            } else if (paymentMethod === 'upi') {
                document.getElementById('loadingOverlay').classList.remove("d-none");
                document.getElementById('paymentMethodBtn').disabled = true;

                fetch("/payment/razorpay-order-success", {
                    method: "POST",
                    headers: {"Content-Type" : "application/json"},
                    body:JSON.stringify(orderData),
                })
                .then(async (response) => {
                    const data = await response.json()                    
                    if (!response.ok || data.status === false) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'warning',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 3000
                        });
                        this.disabled = false;
                        throw new Error(`Server responded with status: ${response.status}`);
                    }
                    return data;
                })
                .then((data) => {
                    console.log("Data:", data)
                    document.getElementById('loadingOverlay').classList.add('d-none');
                    document.getElementById('paymentMethodBtn').disabled = false;

                    if (data.status) {
                        // Check if Razorpay is defined
                        if (typeof Razorpay === 'undefined') {
                            console.error("Razorpay is not loaded!");
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Error',
                                text: 'Payment gateway not available. Please try again later.'
                            });
                            return;
                        };

                        var options = {
                            key: data.razorpayKey,
                            amount: data.amount,
                            currency: data.currency,
                            name: "EarCrafters",
                            description: "Order Payment",
                            order_id: data.razorpayOrderId,
                            handler: function(response) {
                                console.log("Payment successful, response:", response);
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Your payment has been successfully completed.',
                                    showConfirmButton: false,
                                    timer: 3000
                                })
                                .then(() => {
                                    window.location.href = `/order-success?orderId=${data.orderId}`;
                                });
                            },
                            // Adding a failure handler to the razorpay options
                            "prefill": {
                                name: orderData.customerName,
                                email: orderData.customerEmail,
                            },
                            "theme": {
                                "color": "#F37254"
                            },
                            "modal": {
                                "ondismiss": function() {
                                console.log('Payment window was closed before completing.');
                                }
                            },
                        };
                        
                        console.log("Razorpay options:", options);
                        
                        var rzp1 = new Razorpay(options);
                        try {

                            console.log("Razorpay open");
                            rzp1.open();
                            
                        } catch (error) {
                            console.error("Error opening Razorpay window:", error);
                            window.location.href = `/payment/razorpay-order-failed?orderId=${data.orderId}`;     // Redirect to the failure page
                        }

                        // Handle Razorpay payment failure
                        rzp1.on('payment.failed', function(response) {
                            console.log("Payment failed:", response);
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: 'Payment failed. Please try again later',
                                showConfirmButton: false,
                                timer: 3000
                            })
                            .then(() => {
                                window.location.href = `/payment/razorpay-order-failed?orderId=${data.orderId}`;
                            })
                        })
                    } else {
                        console.log('Error');
                    }
                })
                .catch((error) => {
                    console.log('Error:', error);
                    document.getElementById('loadingOverlay').classList.add('d-none');
                    document.getElementById('usePaymentMethodBtn').disabled = false; // Re-enable the button
                    Swal.fire({
                        toast: true,
                        position: 'top-end',
                        icon: 'error',
                        title: 'Payment failed. Please try again later.',
                        showConfirmButton: false,
                        timer: 3000
                    });
                });
            };

        });
    });



// Coupon
document.addEventListener("DOMContentLoaded", function() {
  const couponInput = document.getElementById('couponInput');
  const couponList = document.getElementById('couponList');
  const applyCouponBtn = document.getElementById('applyCouponBtn');
  const discountMessage = document.getElementById('discountMessage');
  
  const discountAmountElement = document.getElementById('discountAmount');
  const totalAmountElement = document.getElementById('totalAmount');
  
  // Create a remove coupon button
  const removeCouponBtn = document.createElement('button');
  removeCouponBtn.className = 'btn btn-danger';
  removeCouponBtn.textContent = 'Remove Coupon';
  removeCouponBtn.style.display = 'none'; // Initially hidden
  
  // Get total from the page
  let totalPrice = parseInt('<%= grandTotal %>');  
  let discount = 0;
  let appliedCouponCode = '';

  // Show available coupons on input focus
  couponInput.addEventListener('focus', async () => {
    try {
      const response = await fetch('/checkout/coupon');
      const coupons = await response.json();
      
      couponList.innerHTML = '';
      if (coupons && coupons.length > 0) {
        coupons.forEach(coupon => {
          if (totalPrice >= coupon.minimumPrice) {
            const couponItem = document.createElement('div');
            couponItem.className = 'dropdown-item';
            couponItem.textContent = `${coupon.name} - ₹${coupon.offerPrice} - min. purchase: ₹${coupon.minimumPrice}`;
            couponItem.onclick = () => {
              couponInput.value = coupon.name;
              couponList.style.display = 'none';
            };
            couponList.appendChild(couponItem);
          }
        });
      }
      couponList.style.display = couponList.children.length > 0 ? 'block' : 'none';
    } catch (error) {
      console.error('Error fetching coupons:', error);
    }
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (e.target !== couponInput && e.target !== couponList) {
      couponList.style.display = 'none';
    }
  });

  // Apply coupon button handler
  applyCouponBtn.addEventListener('click', async () => {
    const couponCode = couponInput.value.trim();
    
    if (!couponCode) {
      showAlert('error', 'Please enter a valid coupon code.');
      return;
    }

    try {
      const response = await fetch('/checkout/apply-coupon', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code: couponCode,
          totalPrice
        })
      });
      
      const data = await response.json();
      if (data.status) { // Changed from data.success to data.status to match backend
        // Store the applied coupon
        appliedCouponCode = couponCode;
        discount = data.offerPrice;
        totalPrice = data.newTotalPrice;

        // Update the UI
        if (discountAmountElement) {
          discountAmountElement.textContent = `₹${discount}`;
        }
        if (totalAmountElement) {
          totalAmountElement.textContent = `₹${totalPrice}`;
        }

        // Update the total amount displayed in the grand total section
        const totalAmountDisplay = document.querySelector('.total-amount');
        if (totalAmountDisplay) {
          totalAmountDisplay.textContent = `₹${totalPrice}`;
        }

        // Show success message
        discountMessage.innerHTML = `
          <div class="alert alert-success">
            Coupon applied! You saved ₹${discount}.
          </div>
        `;

        // Toggle buttons
        applyCouponBtn.style.display = 'none';
        
        // Add remove button if not already there
        if (!document.contains(removeCouponBtn)) {
          applyCouponBtn.parentNode.appendChild(removeCouponBtn);
        }
        removeCouponBtn.style.display = 'block';
        
        // Disable input
        couponInput.disabled = true;
      } else {
        // Show error message
        discountMessage.innerHTML = `
          <div class="alert alert-danger">
            ${data.message}
          </div>
        `;
      }
    } catch (error) {
      console.error('Error applying coupon:', error);
      discountMessage.innerHTML = `
        <div class="alert alert-danger">
          An unexpected error occurred. Please try again.
        </div>
      `;
    };

  });

  // Remove coupon button handler
  removeCouponBtn.addEventListener('click', async () => {
    try {
      // Call the remove-coupon endpoint
      const response = await fetch('/checkout/remove-coupon', { // Updated path
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code: appliedCouponCode
        })
      });
      
      const data = await response.json();
      
      if (data.status) { // Changed to match backend
        // Reset values
        totalPrice = data.originalPrice || (totalPrice + discount);
        discount = 0;
        appliedCouponCode = '';

        // Update UI
        if (discountAmountElement) {
          discountAmountElement.textContent = '₹0';
        }
        if (totalAmountElement) {
          totalAmountElement.textContent = `₹${totalPrice}`;
        }

        // Update the total amount displayed in the grand total section
        const totalAmountDisplay = document.querySelector('.total-amount');
        if (totalAmountDisplay) {
          totalAmountDisplay.textContent = `₹${totalPrice}`;
        }

        // Show success message
        discountMessage.innerHTML = `
          <div class="alert alert-info">
            Coupon removed.
          </div>
        `;

        // Toggle buttons
        applyCouponBtn.style.display = 'block';
        removeCouponBtn.style.display = 'none';
        
        // Enable input
        couponInput.disabled = false;
        couponInput.value = '';
      } else {
        discountMessage.innerHTML = `
          <div class="alert alert-danger">
            ${data.message}
          </div>
        `;
      }
    } catch (error) {
      console.error('Error removing coupon:', error);
      discountMessage.innerHTML = `
        <div class="alert alert-danger">
          An unexpected error occurred while removing the coupon.
        </div>
      `;
    }
  });


  // Helper function for showing alerts if SweetAlert is available
  function showAlert(type, message) {
    if (typeof Swal !== 'undefined') {
      Swal.fire({
        icon: type,
        title: type === 'error' ? 'Error!' : 'Success!',
        text: message,
        confirmButtonText: 'OK'
      });
    } else {
      // Fallback to simple alert or custom message
      discountMessage.innerHTML = `
        <div class="alert alert-${type === 'error' ? 'danger' : 'success'}">
          ${message}
        </div>
      `;
    }
  }
});


</script>



<%- include("../../views/partials/user/footer") %>

