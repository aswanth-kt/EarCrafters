<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    h1 {
      font-size: 24px;
      margin-bottom: 20px;
      color: #333;
    }
    
    .order-summary {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
      margin-bottom: 30px;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 8px;
    }
    
    .order-info {
      margin-bottom: 10px;
    }
    
    .order-info h3 {
      font-size: 16px;
      margin-bottom: 5px;
      color: #666;
    }
    
    .order-info p {
      font-size: 16px;
      color: #333;
      font-weight: 500;
    }
    
    .order-status {
      display: inline-block;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
      background-color: #28a745;
      color: white;
    }
    
    .product-list {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 30px;
    }
    
    .product-list th {
      text-align: left;
      padding: 12px 15px;
      background-color: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
      color: #495057;
    }
    
    .product-list td {
      padding: 15px;
      border-bottom: 1px solid #dee2e6;
      vertical-align: middle;
    }
    
    .product-image {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 4px;
    }
    
    .product-name {
      font-weight: 500;
      color: #333;
    }
    
    .product-price {
      font-weight: 600;
      color: #333;
    }
    
    .cancel-btn {
      padding: 8px 16px;
      background-color: #dc3545;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s;
    }
    
    .cancel-btn:hover {
      background-color: #c82333;
    }
    
    .address-box {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 30px;
    }
    
    .address-box h3 {
      font-size: 16px;
      margin-bottom: 10px;
      color: #495057;
    }
    
    @media (max-width: 768px) {
      .order-summary {
        grid-template-columns: 1fr;
      }
      
      .product-list th:nth-child(1),
      .product-list td:nth-child(1) {
        display: none;
      }
    }
  </style>
</head>
<body>

  <div class="page-header breadcrumb-wrap">
    <div class="container">
        <div class="breadcrumb">
            <a href="/" rel="nofollow">Home</a>
            <span></span> <a href="/userProfile" rel="nofollow">Profile</a>
            <span></span> <a href="/userProfile#orders" rel="nofollow">Order</a>
            <span></span> Order Details
        </div>
    </div>
</div>

  <div class="container">
    <h1>Order Details</h1>

    <% if (order && address) { %>
    
    <div class="order-summary">
      <div>
        <div class="order-info">
          <h3>Order ID</h3>
          <p><%= order.orderId %></p>
        </div>
        <div class="order-info">
          <h3>Placed On</h3>
          <p><%= new Date(order.createdOn).toLocaleDateString() %></p>
        </div>
        <div class="order-info">
          <h3>Payment Method</h3>
          <p><%= order.paymentMethod.toUpperCase() %></p>
        </div>
      </div>
      <div>
        <div class="order-info">
          <h3>Status</h3>
          <p><span class="order-status"><%= order.status %></span></p>
        </div>
        <div class="order-info">
          <h3>Expected Delivery</h3>
          <p><%= new Date(new Date(order.createdOn).setDate(new Date(order.createdOn).getDate() + 5)).toLocaleDateString() %>
          </p>
        </div>
      </div>
    </div>
    
    <div class="address-box">
      <h3>Shipping Address</h3>
      <p><%= address.name %><br>
        <%= address.city %><br>
        <%= address.landMark %><br>
        <%= address.state %><br>
      Phone: <%= address.phone %></p>
    </div>
    
    <table class="product-list">
      <thead>
        <tr>
          <th>Image</th>
          <th>Product</th>
          <th>Price</th>
          <th>Quantity</th>
          <th>Status</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <% order.orderItems.forEach((item, index) => { %> 
            <tr>
            <td><img src="/uploads/re-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="product-image"></td> 
            <td class="product-name"><%= item.product.productName %></td>
            <td class="product-price"><%= item.price %></td>
            <td class="product-quantity" data-quantity="<%= item.quantity %>"><%= item.quantity %></td>
            <td><%= order.status %></td>
            <td><button class="cancel-btn" onclick="showCancelConfirmation('<%= item.product._id %>', '<%= index %>')">Cancel Order</button></td>
            </tr>
        <% }) %>
      </tbody>
    </table>
    <% } else { %>
    <div>
        <h4>No Orders Found</h4> <br>
    </div>
    <% } %>
</div>

  <script>
    
    function showCancelConfirmation(productId, rowIndex) {
      Swal.fire({
        title: 'Cancel Order',
        html: `
        <p>Please provide a reason for cancellation:</p>
        <select id="cancellationReason" class="swal2-input">
            <option value="">-- Select a reason --</option>
            <option value="wrong-item">Ordered wrong item</option>
            <option value="delayed">Shipping taking too long</option>
            <option value="changed-mind">Changed my mind</option>
            <option value="found-cheaper">Found cheaper elsewhere</option>
            <option value="other">Other reason</option>
        </select>
        <textarea id="otherReason" class="swal2-textarea" placeholder="Please specify your reason..." style="display: none; margin-top: 10px;"></textarea>
        `,
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it',
        cancelButtonText: 'No, keep it',
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        didOpen: () => {
          const reasonSelect = document.getElementById('cancellationReason');
          const otherReasonField = document.getElementById('otherReason');
          
          reasonSelect.addEventListener('change', function() {
            if (this.value === 'other') {
              otherReasonField.style.display = 'block';
            } else {
              otherReasonField.style.display = 'none';
            }
          });
        },
        preConfirm: () => {
          const reason = document.getElementById('cancellationReason').value;
          const otherReason = document.getElementById('otherReason').value;
          
          // Get the quantity from the correct row
          const quantityElements = document.querySelectorAll('.product-quantity');
          const cancelQuantity = quantityElements[rowIndex].getAttribute('data-quantity');
          
          if (!reason) {
            Swal.showValidationMessage('Please select a reason for cancellation');
            return false;
          }
          
          if (reason === 'other' && !otherReason) {
            Swal.showValidationMessage('Please specify your reason');
            return false;
          }
          
          return { reason, otherReason, cancelQuantity };
        }
      }).then((result) => {
        if (result.isConfirmed) {
          // Save cancellation data to the database
          saveCancellationToDB(productId, result.value.reason, result.value.otherReason, result.value.cancelQuantity);
        }
      });
    }

    // Function to save cancellation data to database
    function saveCancellationToDB(productId, reason, otherReason, cancelQuantity) {
      // Show loading indicator
      Swal.fire({
        title: 'Processing...',
        text: 'Cancelling your order',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      // Prepare data to send
      const data = {
        productId: productId,
        reason: reason,
        otherReason: reason === 'other' ? otherReason : '',
        cancelQuantity: cancelQuantity,
        cancelledAt: new Date().toISOString()
      };
      
      // Send data to server using fetch API
      fetch('/profile/order-details/cancel-product', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        Swal.fire({
          title: 'Cancelled!',
          text: `Your order has been cancelled successfully.`,
          icon: 'success',
          confirmButtonColor: '#28a745'
        }).then(() => {
          location.reload();
        });
      })
      .catch(error => {
        Swal.fire({
          title: 'Error!',
          text: 'There was a problem cancelling your order. Please try again.',
          icon: 'error',
          confirmButtonColor: '#dc3545'
        });
        console.error('Error:', error);
      });
    }
  </script>
</body>
</html>

<%- include("../../views/partials/user/footer") %>