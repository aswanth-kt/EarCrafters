<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    h1 {
      font-size: 24px;
      margin-bottom: 20px;
      color: #333;
    }
    
    .order-summary {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 20px;
      margin-bottom: 30px;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 8px;
    }
    
    .order-info {
      margin-bottom: 10px;
    }
    
    .order-info h3 {
      font-size: 16px;
      margin-bottom: 5px;
      color: #666;
    }
    
    .order-info p {
      font-size: 16px;
      color: #333;
      font-weight: 500;
    }
    
    .order-status {
      display: inline-block;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
      background-color: #28a745;
      color: white;
    }
    
    .product-list {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 30px;
    }
    
    .product-list th {
      text-align: left;
      padding: 12px 15px;
      background-color: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
      color: #495057;
    }
    
    .product-list td {
      padding: 15px;
      border-bottom: 1px solid #dee2e6;
      vertical-align: middle;
    }
    
    .product-image {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 4px;
    }
    
    .product-name {
      font-weight: 500;
      color: #333;
    }
    
    .product-price {
      font-weight: 600;
      color: #333;
    }
    
    .cancel-btn {
      padding: 8px 16px;
      background-color: #dc3545;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s;
    }
    
    .cancel-btn:hover {
      background-color: #c82333;
    }
    
    .address-box {
      background-color: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      margin-bottom: 30px;
    }
    
    .address-box h3 {
      font-size: 16px;
      margin-bottom: 10px;
      color: #495057;
    }
    
    @media (max-width: 768px) {
      .order-summary {
        grid-template-columns: 1fr;
      }
      
      .product-list th:nth-child(1),
      .product-list td:nth-child(1) {
        display: none;
      }
    }

    .invoice-container{
      position: relative;
      padding: 20px;
    }

    .invoiceBtn{
      position: absolute;
      top: 10px;
      right: 10px;
      background-color: #296fb9;
    }

    .invoiceBtn:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>

  <div class="page-header breadcrumb-wrap">
    <div class="container">
        <div class="breadcrumb">
            <a href="/" rel="nofollow">Home</a>
            <span></span> <a href="/userProfile" rel="nofollow">Profile</a>
            <span></span> <a href="/userProfile#orders" rel="nofollow">Order</a>
            <span></span> Order Details
        </div>
    </div>
</div>

  <div class="container">
    <h1>Order Details</h1>

    <% if (order && address) { %>

      <div class="invoice-container" style="margin-bottom: 20px;">
        <% if (["cod", "upi", "wallet"].includes(order.paymentMethod) &&
         ["Order Placed", "Processing", "Shipped", "Delivered"].includes(order.status)) { %>
          <button class="btn btn-dark invoiceBtn" onclick="downloadInvoice('<%= order._id %>', '<%=order.orderId%>')">Download Invoice</button>

        <% } else if (order.status === "Payment Pending") { %>
          <button class="btn btn-outline-info invoiceBtn" 
          onclick="retryPayment()">Retry Payment</button>
        <% } %>
      </div>
    
      <div class="order-summary">
        <div>
          <div class="order-info">
            <h3>Order ID</h3>
            <p><%= order.orderId %></p>
          </div>
          <div class="order-info">
            <h3>Placed On</h3>
            <p><%= new Date(order.createdOn).toLocaleDateString() %></p>
          </div>
          <div class="order-info">
            <h3>Payment Method</h3>
            <p><%= order.paymentMethod.toUpperCase() %></p>
          </div>
        </div>
        <div>
          <div class="order-info">
            <h3>Status</h3>
            <% if (order.status !== "Return Declined") { %>
            <p><span class="order-status"><%= order.status %></span></p>
            <% } else {%>
              <p><span class="order-status">Delivered</span></p>
            <% } %>
          </div>
          <div class="order-info">
            <h3>Total Amount</h3>
            <p class="font-weight-bold"><%= order.finalAmount %>
            </p>
          </div>
          <div class="order-info">
            <h3>Expected Delivery</h3>
            <p><%= new Date(new Date(order.createdOn).setDate(new Date(order.createdOn).getDate() + 5)).toLocaleDateString() %>
            </p>
          </div>
        </div>
        <div>
          
        </div>
      </div>
      
      <div class="address-box">
        <h3>Shipping Address</h3>
        <p><%= address.name %><br>
          <%= address.city %><br>
          <%= address.landMark %><br>
          <%= address.state %><br>
        Phone: <%= address.phone %></p>
      </div>

      <div id="loadingOverlay" style="display: none;">
        <div class="spinner-border" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      
      <table class="product-list">
        <thead>
          <tr>
            <th>Image</th>
            <th>Product</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Status</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% order.orderItems.forEach((item, index) => { %> 
              <tr>
              <td><img src="/uploads/re-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="product-image"></td> 
              <td class="product-name"><%= item.product.productName %></td>
              <td class="product-price"><%= item.price %></td>
              <td class="product-quantity" data-quantity="<%= item.quantity %>"><%= item.quantity %></td>

              
              <% if (
                (order.status === "Order Placed" ||
                order.status === "Processing" ||
                order.status === "Shipped" ||
                order.status === "Delivered") &&
                item.cancellationStatus === "Not Cancelled" &&
                item.returnStatus === "Not Requested"
              ) { %>
                <td><%= order.status %></td>

              <% } else if (order.status === "Payment Pending") { %>
                <td><%= order.status %></td>

              <% } else if (item.cancellationStatus === "Cancelled") { %>
                <td>Item Cancelled</td>

              <% } else if (
                item.returnStatus === "Requested" ||
                item.returnStatus === "Returned" ||
                item.returnStatus === "Return Declined"
              ) { %>
                <td class="return-status" data-returnstatus="<%= item.returnStatus %>"><%= item.returnStatus %></td>
              <% } %>

              <td>
                <% if (order.status === "Delivered" && 
                item.returnStatus === "Not Requested" && item.cancellationStatus === "Not Cancelled") { %>
                  <button class="btn btn-outline-info"
                    onclick="returnConfirmation('<%= item.product._id %>', '<%= index %>', '<%= order.orderId %>', '<%= order.finalAmount %>', '<%= item.price %>', '<%= order.totalPrice %>')">
                    Return
                  </button>
              
                <% } else if (item.returnStatus === "Requested") { %>
                  <p class="text-muted text-center">Please wait for admin approval</p>
              
                <% } else if (item.returnStatus === "Returned") { %>
                  <p class="text-center text-success">Return request has been approved</p>
              
                <% } else if (item.returnStatus === "Return Declined") { %>
                  <p class="text-center text-danger">Return request has been declined</p>
                  
                <% } else if (item.cancellationStatus === "Not Cancelled" &&
                            order.status !== "Delivered" &&
                            order.status !== "Returned") { %>
                  <button class="cancel-btn"
                    onclick="showCancelConfirmation('<%= item.product._id %>', '<%= index %>', '<%= order.orderId %>', '<%= order.finalAmount %>', '<%= item.price %>', '<%= order.totalPrice %>')">
                    Cancel Order
                  </button>
                <% } %>
              </td>            

              </tr>
          <% }) %>
        </tbody>
      </table>
    <% } else { %>
    <div>
        <h4>No Orders Found</h4> <br>
    </div>
    <% } %>
</div>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  
<SCript>

  const orderJsonData = '<%- JSON.stringify(order) %>';
  const addressIdJsonData = '<%- JSON.stringify (address._id) %>';
  const gst = '<%= gst %>'

  document.addEventListener('DOMContentLoaded', function() {
   
    function retryPayment() {
      console.log("Retry payment function loading...");
      const order = JSON.parse(orderJsonData);
      const addressId = JSON.parse(addressIdJsonData);
      const finalAmount = parseInt(order.finalAmount);
      const orderItems = order.orderItems;
      const orderId = order._id
      const totalPrice = parseInt(order.totalPrice);
      const discount = order.discount;
      const status = "Order Placed";
      const couponApplied = discount > 0;
      const customerName = "<%= user.name %>";
      const customerEmail = "<%= user.email %>";
      
      console.log(
        "finalAmount:", finalAmount,
        "orderItems:", orderItems,
        "addressId:", addressId,
        "totalPrice:", totalPrice,
        "discount:", discount,
        "status:", status,
        "couponApplied:", couponApplied,
        "customerName:", customerName,
        "customerEmail:", customerEmail,
        "orderId:", orderId,
      );
  
      const orderData = {
        orderItems,
        addressId,
        totalPrice,
        discount,
        finalAmount,
        status,
        customerName,
        customerEmail,
        couponApplied,
        paymentMethod: "upi",
        orderId,
        gst
      };
  
      console.log("OrderData:", orderData);
  
      fetch("/payment/razorpay-retry-payment", {
        method: "POST",
        headers: {"Content-Type" : "application/json"},
        body: JSON.stringify(orderData),
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`Server responded with status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        console.log("Response data:" ,data);
  
        if (data.status) {
          // Check if Razorpay is defined
          if (typeof Razorpay === 'undefined') {
            console.error("Razorpay is not loaded!");
            Swal.fire({
              icon: 'error',
              title: 'Payment Error',
              text: 'Payment gateway not available. Please try again later.'
            });
            return;
          }
  
          var options = {
            key: data.razorpayKey,
            amount: data.amount,
            currency: data.currency,
            name: "EarCrafters",
            description: "Order Payment",
            order_id: data.razorpayOrderId,
            handler: function(response) {
              console.log("Payment successful, response:", response);
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Your payment has been successfully completed.',
                showConfirmButton: false,
                timer: 3000
              })
              .then(() => {
                window.location.href = `/order-success?orderId=${data.orderId}`;
              });
            },
            // Adding a failure handler to the razorpay options
            "prefill": {
              name: orderData.customerName,
              email: orderData.customerEmail,
            },
            "theme": {
              "color": "#F37254"
            },
            "modal": {
              "ondismiss": function() {
                console.log('Payment window was closed before completing.');
              }
            },
          };
          
          console.log("Razorpay options:", options);
          
          var rzp1 = new Razorpay(options);
          try {
            console.log("Razorpay open");
            rzp1.open();
            
          } catch (error) {
            console.error("Error opening Razorpay window:", error);
            window.location.href = `/payment/razorpay-order-failed?orderId=${data.orderId}`;
          }
  
          // Handle Razorpay payment failure
          rzp1.on('payment.failed', function(response) {
            console.log("Payment failed:", response);
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Payment failed. Please try again later',
              showConfirmButton: false,
              timer: 3000
            })
            .then(() => {
              window.location.href = `/payment/razorpay-order-failed?orderId=${data.orderId}`;
            });
          });
        } else {
          console.log('Error');
        }
      });
    }
  
    // Make retryPayment function available globally
    window.retryPayment = retryPayment;
  });
  
  // Move other functions outside the DOMContentLoaded to make them globally available
  function showCancelConfirmation(productId, rowIndex, orderId, finalAmount, price, totalPrice) {
    Swal.fire({
      title: 'Cancel Order',
      html: `
      <p>Please provide a reason for cancellation:</p>
      <select id="cancellationReason" class="swal2-input">
          <option value="">-- Select a reason --</option>
          <option value="wrong-item">Ordered wrong item</option>
          <option value="delayed">Shipping taking too long</option>
          <option value="changed-mind">Changed my mind</option>
          <option value="found-cheaper">Found cheaper elsewhere</option>
          <option value="other">Other reason</option>
      </select>
      <textarea id="otherReason" class="swal2-textarea" placeholder="Please specify your reason..." style="display: none; margin-top: 10px;"></textarea>
      `,
      showCancelButton: true,
      confirmButtonText: 'Yes, cancel it',
      cancelButtonText: 'No, keep it',
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      didOpen: () => {
        const reasonSelect = document.getElementById('cancellationReason');
        const otherReasonField = document.getElementById('otherReason');
        
        reasonSelect.addEventListener('change', function() {
          if (this.value === 'other') {
            otherReasonField.style.display = 'block';
          } else {
            otherReasonField.style.display = 'none';
          }
        });
      },
      preConfirm: () => {
        const reason = document.getElementById('cancellationReason').value;
        const otherReason = document.getElementById('otherReason').value;
        
        // Get the quantity from the correct row
        const quantityElements = document.querySelectorAll('.product-quantity');
        const cancelQuantity = quantityElements[rowIndex].getAttribute('data-quantity');
        
        if (!reason) {
          Swal.showValidationMessage('Please select a reason for cancellation');
          return false;
        }
        
        if (reason === 'other' && !otherReason) {
          Swal.showValidationMessage('Please specify your reason');
          return false;
        }
        
        return { reason, otherReason, cancelQuantity };
      }
    }).then((result) => {
      if (result.isConfirmed) {
        // Save cancellation data to the database
        saveCancellationToDB(productId, result.value.reason, result.value.otherReason, result.value.cancelQuantity, orderId, finalAmount, price, totalPrice);
      }
    });
  }
  
  // Function to save cancellation data to database
  function saveCancellationToDB(productId, reason, otherReason, cancelQuantity, orderId, finalAmount, price, totalPrice) {
    // Show loading indicator
    Swal.fire({
      title: 'Processing...',
      text: 'Cancelling your order',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    // Prepare data to send
    const data = {
      productId: productId,
      reason: reason,
      otherReason: reason === 'other' ? otherReason : '',
      cancelQuantity: parseInt(cancelQuantity),
      cancelledAt: new Date().toISOString(),
      orderId: orderId,
      finalAmount,
      price, 
      totalPrice,
    };
    
    // Send data to server using fetch API
    fetch('/cancel-product', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    })
    .then(response => {
      console.log('Cancel product Status:', response.status, response);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      console.log("cancellation data:", data)
      Swal.fire({
        title: 'Cancelled!',
        text: `Your order has been cancelled successfully.`,
        icon: 'success',
        confirmButtonColor: '#28a745'
      }).then(() => {
        location.reload();
      });
    })
    .catch(error => {
      Swal.fire({
        title: 'Error!',
        text: 'There was a problem cancelling your order. Please try again.',
        icon: 'error',
        confirmButtonColor: '#dc3545'
      });
      console.error('Error:', error);
    });
  }
  
  // Return function
  function returnConfirmation(productId, rowIndex, orderId, finalAmount, price, totalPrice) {
    Swal.fire({
      title: 'Return Order',
      html: `
      <p>Please provide a reason for returning:</p>
      <select id="returnReason" class="swal2-input">
          <option value="">-- Select a reason --</option>
          <option value="wrong-item">Delivered wrong item</option>
          <option value="different-product">Order product is different</option>
          <option value="damaged-product">Product is damaged</option>
          <option value="other">Other reason</option>
      </select>
      <textarea id="otherReason" class="swal2-textarea" placeholder="Please specify your reason..." style="display: none; margin-top: 10px;"></textarea>
      `,
      showCancelButton: true,
      confirmButtonText: 'Yes, Return it',
      cancelButtonText: 'No, keep it',
      confirmButtonColor: '#dc3545',
      cancelButtonColor: '#6c757d',
      didOpen: () => {
        const reasonSelect = document.getElementById('returnReason');
        const otherReasonField = document.getElementById('otherReason');
        
        reasonSelect.addEventListener('change', function() {
          if (this.value === 'other') {
            otherReasonField.style.display = 'block';
          } else {
            otherReasonField.style.display = 'none';
          }
        });
      },
      preConfirm: () => {
        const reason = document.getElementById('returnReason').value;
        const otherReason = document.getElementById('otherReason').value;
        
        // Get the quantity from the correct row
        const quantityElements = document.querySelectorAll('.product-quantity');
        const returnQuantity = quantityElements[rowIndex].getAttribute('data-quantity');
        console.log("quantityElements:",quantityElements, "returnStatus: noo", "returnQuantity:", returnQuantity);
        
        if (!reason) {
          Swal.showValidationMessage('Please select a reason for return');
          return false;
        }
        
        if (reason === 'other' && !otherReason) {
          Swal.showValidationMessage('Please specify your reason');
          return false;
        }
        
        return { reason, otherReason, returnQuantity };
      }
    }).then((result) => {
      if (result.isConfirmed) {
        // Save return data to the database
        saveReturnToDB(productId, result.value.reason, result.value.otherReason, result.value.returnQuantity, orderId, finalAmount, price, totalPrice);
      }
    });
  }
  
  // Function to save return data to database
  function saveReturnToDB(productId, reason, otherReason, returnQuantity, orderId, finalAmount, price, totalPrice) {
    // Show loading indicator
    Swal.fire({
      title: 'Processing...',
      text: 'Submitting your return request for admin approval',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    // Prepare data to send
    const data = {
      productId: productId,
      reason: reason,
      otherReason: reason === 'other' ? otherReason : '',
      returnQuantity: returnQuantity,
      returnedAt: new Date().toISOString(),
      orderId: orderId,
      finalAmount,
      price,
      totalPrice
    };
    
    // Send data to server using fetch API
    fetch('/return-product', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data)
    })
    .then(response => {
      console.log("response:", response);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      Swal.fire({
        title: 'Return Requested!',
        text: `Your return request has been sent successfully and is pending admin approval.`,
        icon: 'success',
        confirmButtonColor: '#28a745'
      }).then(() => {
        location.reload();
      });
    })
    .catch(error => {
      Swal.fire({
        title: 'Error!',
        text: 'There was a problem processing your return request. Please try again.',
        icon: 'error',
        confirmButtonColor: '#dc3545'
      });
      console.error('Error:', error);
    });
  }
  
  function downloadInvoice(orderId, orderNumber) {
    document.getElementById('loadingOverlay').style.display = 'flex';
    
    fetch(`/checkout/generate-invoice/${orderId}`)
    .then(response => {
      console.log('Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.blob();
    })
    .then(blob => {
      console.log('Blob received:', blob);
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      console.log("url:", url, "a:", a);  // Debugging
      a.href = url;
      a.download = `invoice-${orderNumber}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      document.getElementById('loadingOverlay').style.display = 'none';
    })
    .catch(error => {
      console.error('Error downloading invoice:', error);
      Swal.fire({
        title: 'Error!',
        text: 'Failed to download the invoice. Please try again later.',
        icon: 'error',
        confirmButtonText: 'OK'
      });
      document.getElementById('loadingOverlay').style.display = 'none';
    });
  };

  </SCRipt>

</body>
</html>

<%- include("../../views/partials/user/footer") %>